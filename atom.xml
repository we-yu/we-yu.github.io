<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kohaku-san Kawaii</title>
  
  <subtitle>we-yu&#39;s note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://we-yu.github.io/"/>
  <updated>2019-03-30T14:17:48.858Z</updated>
  <id>https://we-yu.github.io/</id>
  
  <author>
    <name>yuji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>My Amber and Silver</title>
    <link href="https://we-yu.github.io/2019/03/30/My-Amber-and-Silver/"/>
    <id>https://we-yu.github.io/2019/03/30/My-Amber-and-Silver/</id>
    <published>2019-03-30T14:10:25.000Z</published>
    <updated>2019-03-30T14:17:48.858Z</updated>
    
    <content type="html"><![CDATA[<h4 id="This-is-my-silver-Name-is-Gin"><a href="#This-is-my-silver-Name-is-Gin" class="headerlink" title="This is my silver, Name is Gin."></a>This is my silver, Name is Gin.</h4><p><img src="https://raw.githubusercontent.com/we-yu/we-yu.github.io/master/2019/03/30/My-Amber-and-Silver/190330_Gin.jpg" alt="image"></p><ul><li>It seems now he likes on refrigerator.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;This-is-my-silver-Name-is-Gin&quot;&gt;&lt;a href=&quot;#This-is-my-silver-Name-is-Gin&quot; class=&quot;headerlink&quot; title=&quot;This is my silver, Name is Gin.&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Cat" scheme="https://we-yu.github.io/tags/Cat/"/>
    
      <category term="Diary" scheme="https://we-yu.github.io/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>Line-Sticker-Lider (cooperate with Slack)</title>
    <link href="https://we-yu.github.io/2019/03/28/Line-Sticker-Lider-cooperate-with-Slack/"/>
    <id>https://we-yu.github.io/2019/03/28/Line-Sticker-Lider-cooperate-with-Slack/</id>
    <published>2019-03-28T15:04:24.000Z</published>
    <updated>2019-03-31T17:22:44.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Line-Sticker-samples-use-in-Slack"><a href="#Line-Sticker-samples-use-in-Slack" class="headerlink" title="Line Sticker samples use in Slack"></a>Line Sticker samples use in Slack</h2><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><ul><li>On Slack, If post “Picture’s URL”. Shows that picture directly in chat window. (Depend on setting)</li></ul><p><img src="https://raw.githubusercontent.com/we-yu/we-yu.github.io/master/2019/03/28/Line-Sticker-Lider-cooperate-with-Slack/sampleSlack.png" alt="image"></p><ul><li>All of Line stickers is published on <a href="https://store.line.me/" target="_blank" rel="noopener">Line Store</a> website.</li><li>But right click on sticker graphic, Can’t get URL. Might be restricted.</li></ul><p><img src="https://raw.githubusercontent.com/we-yu/we-yu.github.io/master/2019/03/28/Line-Sticker-Lider-cooperate-with-Slack/stroke.png" alt="image"></p><ul><li><strong>No worry, We have F12 on keyboard</strong></li></ul><p><img src="https://raw.githubusercontent.com/we-yu/we-yu.github.io/master/2019/03/28/Line-Sticker-Lider-cooperate-with-Slack/popteamLineBlur.png" alt="image"></p><ul><li>Finally, Get target sticker’s URL from <code>Elements</code> window and post that on Slack. We can see desired one for your team.</li></ul><p><img src="https://raw.githubusercontent.com/we-yu/we-yu.github.io/master/2019/03/28/Line-Sticker-Lider-cooperate-with-Slack/onSlackBlur.png" alt="image"></p><h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><ul><li>We can get desired sticker sample picture by above process.</li><li>But if do it every time. It’s bother.</li><li>By the way, 3 great virtues of a programmer. <strong>Laziness, Impatience, Hubris</strong>.</li><li>It is time —– for simplification.</li></ul><h3 id="How-to-do"><a href="#How-to-do" class="headerlink" title="How to do"></a>How to do</h3><ul><li>Made by Primitive Python as possible.</li><li>Require components maybe <strong>GUI, Web-Scraper, DB</strong>.<ul><li>I think <strong>Recent, Favorite</strong> functions are useful.</li></ul></li><li>Web-Scraping I already learned, Maybe I can do.</li><li>Python most primitive GUI component is maybe <strong>tkinter</strong>? OK I will do.</li><li>This is just small &amp; local application. No need huge DB system. Can I use <strong>SQLite</strong>?</li></ul><h3 id="Currently-progress"><a href="#Currently-progress" class="headerlink" title="Currently progress"></a>Currently progress</h3><ul><li>I have confirmed that SQLite can be used in Python<ul><li>Now try to make sample <a href="https://github.com/we-yu/L_SL/blob/develop/guiPractice/src/SQLiTest.py" target="_blank" rel="noopener">script</a>.</li></ul></li><li>Considering draft design of GUI…</li></ul><p><img src="https://raw.githubusercontent.com/we-yu/we-yu.github.io/master/2019/03/28/Line-Sticker-Lider-cooperate-with-Slack/IMG_0670.JPG" alt="image"></p><p>To be continued…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Line-Sticker-samples-use-in-Slack&quot;&gt;&lt;a href=&quot;#Line-Sticker-samples-use-in-Slack&quot; class=&quot;headerlink&quot; title=&quot;Line Sticker samples use i
      
    
    </summary>
    
    
      <category term="Python" scheme="https://we-yu.github.io/tags/Python/"/>
    
      <category term="Web-Scraping" scheme="https://we-yu.github.io/tags/Web-Scraping/"/>
    
      <category term="tkinter" scheme="https://we-yu.github.io/tags/tkinter/"/>
    
      <category term="Slack" scheme="https://we-yu.github.io/tags/Slack/"/>
    
      <category term="WIP" scheme="https://we-yu.github.io/tags/WIP/"/>
    
  </entry>
  
  <entry>
    <title>Pythonによるスクレイピングでニコニコ大百科掲示板を保存してみる</title>
    <link href="https://we-yu.github.io/2019/03/25/Python%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0%E3%81%A7%E3%83%8B%E3%82%B3%E3%83%8B%E3%82%B3%E5%A4%A7%E7%99%BE%E7%A7%91%E6%8E%B2%E7%A4%BA%E6%9D%BF%E3%82%92%E4%BF%9D%E5%AD%98%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/"/>
    <id>https://we-yu.github.io/2019/03/25/Pythonによるスクレイピングでニコニコ大百科掲示板を保存してみる/</id>
    <published>2019-03-25T16:55:16.000Z</published>
    <updated>2019-03-27T17:58:24.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Save-logs-from-NICO-NICO-PEDIA-by-Web-scraping"><a href="#Save-logs-from-NICO-NICO-PEDIA-by-Web-scraping" class="headerlink" title="Save logs from NICO NICO PEDIA by Web-scraping."></a>Save logs from <a href="https://dic.nicovideo.jp/" target="_blank" rel="noopener">NICO NICO PEDIA</a> by Web-scraping.</h2><h3 id="Now-NICO-NICO-PEDIA-Nicopedy-res-page-only-show-30-res-in-1-page-Difficult-to-save-all-logs-in-1-time-Solve-this-issue-by-Web-scraping"><a href="#Now-NICO-NICO-PEDIA-Nicopedy-res-page-only-show-30-res-in-1-page-Difficult-to-save-all-logs-in-1-time-Solve-this-issue-by-Web-scraping" class="headerlink" title="Now NICO-NICO-PEDIA(Nicopedy) res page only show 30 res in 1 page, Difficult to save all logs in 1 time. Solve this issue by Web-scraping."></a>Now NICO-NICO-PEDIA(Nicopedy) res page only show 30 res in 1 page, Difficult to save all logs in 1 time. Solve this issue by Web-scraping.</h3><h4 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h4><ul><li>Nicopedy res page only shows 30 res in 1 page, Nothing any functions to save all logs.</li><li>Many times delete res by admin, Difficult to trace log text.</li></ul><h4 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h4><ul><li>Scraping target Article, Get all res from 1 to latest, save as text file.</li></ul><h4 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h4><ul><li>Input top URL of article, All res log save as text file. -&gt; <em>Article-title</em>.log</li><li>If new article, Get all logs. But that is suspended article, restart from latest res.</li><li>By only Python that is difficult <code>File connection</code> and <code>1 line extract</code>. Some process left to Bash.</li></ul><p>My source is here.<br><br><a href="https://github.com/we-yu/sb.webscraping" target="_blank" rel="noopener">https://github.com/we-yu/sb.webscraping</a></p><h4 id="Semi-automation"><a href="#Semi-automation" class="headerlink" title="Semi-automation"></a>Semi-automation</h4><ul><li>If you want to save log everytime, Prepare text file as this and kick command each time as usage, All logs update automatically.</li></ul><p>File name : <em>AutoLoadArticleList.txt</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># usage</span><br><span class="line"># $ cat AutoLoadArticleList.txt  | grep -vF &apos;#&apos; | xargs -I&#123;&#125; python3 nicopedy_saver.py &#123;&#125;</span><br><span class="line"># Python</span><br><span class="line">https://dic.nicovideo.jp/a/python</span><br><span class="line"># Linux</span><br><span class="line">https://dic.nicovideo.jp/a/linux</span><br><span class="line"># PHP</span><br><span class="line">https://dic.nicovideo.jp/a/php</span><br><span class="line"># メルトリリス</span><br><span class="line">https://dic.nicovideo.jp/a/%E3%83%A1%E3%83%AB%E3%83%88%E3%83%AA%E3%83%AA%E3%82%B9</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Save-logs-from-NICO-NICO-PEDIA-by-Web-scraping&quot;&gt;&lt;a href=&quot;#Save-logs-from-NICO-NICO-PEDIA-by-Web-scraping&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://we-yu.github.io/tags/Python/"/>
    
      <category term="Bash" scheme="https://we-yu.github.io/tags/Bash/"/>
    
      <category term="Python3" scheme="https://we-yu.github.io/tags/Python3/"/>
    
      <category term="Niconico" scheme="https://we-yu.github.io/tags/Niconico/"/>
    
  </entry>
  
  <entry>
    <title>CSR/CRSによる疎行列の圧縮（C言語）</title>
    <link href="https://we-yu.github.io/2019/03/25/CSR-CRS%E3%81%AB%E3%82%88%E3%82%8B%E7%96%8E%E8%A1%8C%E5%88%97%E3%81%AE%E5%9C%A7%E7%B8%AE%EF%BC%88C%E8%A8%80%E8%AA%9E%EF%BC%89/"/>
    <id>https://we-yu.github.io/2019/03/25/CSR-CRSによる疎行列の圧縮（C言語）/</id>
    <published>2019-03-25T15:50:00.000Z</published>
    <updated>2019-03-27T17:58:51.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Compress-Sparse-matrix-by-CSR-CRS-algorithm"><a href="#Compress-Sparse-matrix-by-CSR-CRS-algorithm" class="headerlink" title="Compress Sparse matrix by CSR|CRS algorithm."></a>Compress Sparse matrix by CSR|CRS algorithm.</h2><h3 id="Coding-by-C-Lang-Use-CSR-algorithm"><a href="#Coding-by-C-Lang-Use-CSR-algorithm" class="headerlink" title="Coding by C-Lang. Use CSR algorithm."></a>Coding by C-Lang. Use <a href="https://en.wikipedia.org/wiki/Sparse_matrix" target="_blank" rel="noopener">CSR</a> algorithm.</h3><h4 id="Compress-sparse-matrix"><a href="#Compress-sparse-matrix" class="headerlink" title="Compress sparse matrix"></a>Compress sparse matrix</h4><ul><li>On <a href="https://we-yu.github.io/2019/03/25/python%E3%81%AB%E3%82%88%E3%82%8B%E7%B4%B3%E5%A3%AB%E9%81%94%E3%81%AE%E6%80%A7%E7%99%96%E5%88%86%E6%9E%90%EF%BC%9A%E3%83%87%E3%83%BC%E3%82%BF%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E7%B7%A8/">Previous article</a>, I created Fetishism CSV.<ul><li>This is exported as Table. i.e. This is Matrix. And 1 product contains 6 tags (max), If increase target products, Also matrix getting huge by 0 elements. (<strong>This is sparse matrix</strong>)</li></ul></li><li>And <em>Wanting all between heaven and hell is the human condition.</em> So, Sparse Matrix should be compressed.</li><li>On this time, Compress by CSR method used 3 matrixes. Before real data, Try by sample matrix.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sparse Matrix size define</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SPROW_SIZE 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SPCOL_SIZE 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSR用３配列</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">csrData</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> row[_SPROW_SIZE + <span class="number">1</span>]; <span class="comment">// 縦軸</span></span><br><span class="line">    <span class="keyword">int</span> col[_SPROW_SIZE * _SPROW_SIZE]; <span class="comment">// 横軸</span></span><br><span class="line">    <span class="keyword">int</span> val[_SPROW_SIZE * _SPROW_SIZE]; <span class="comment">// 実際の要素</span></span><br><span class="line">&#125; <span class="keyword">typedef</span> csrData;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dbg_ShowSomeVal</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dbg_ShowMatrix</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dbg_ShowCSRStruct</span><span class="params">(csrData*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountNonZeroValues</span><span class="params">(<span class="keyword">int</span>*, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateCompactMatrix</span><span class="params">(<span class="keyword">int</span>*, csrData*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// メイン処理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// CSR管理用構造体定義・アドレス獲得</span></span><br><span class="line">    csrData csr;</span><br><span class="line">    csrData *csr_p;</span><br><span class="line">    csr_p = &amp;csr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ベースとなる疎行列</span></span><br><span class="line">    <span class="keyword">int</span> sparseMatrix[_SPROW_SIZE][_SPCOL_SIZE] =</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">0</span> , <span class="number">0</span> , <span class="number">3</span> , <span class="number">0</span> , <span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span> , <span class="number">0</span> , <span class="number">5</span> , <span class="number">7</span> , <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span> , <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span> , <span class="number">2</span> , <span class="number">6</span> , <span class="number">0</span> , <span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 疎行列再現用エリア確保　ゼロクリアしておく</span></span><br><span class="line">    <span class="keyword">int</span> sparseMatrix_recon[_SPROW_SIZE][_SPCOL_SIZE];</span><br><span class="line">    <span class="built_in">memset</span>(sparseMatrix_recon, <span class="number">0</span>, <span class="keyword">sizeof</span>(sparseMatrix_recon));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CSR管理構造体初期化</span></span><br><span class="line">    <span class="built_in">memset</span>(csr_p, <span class="number">0</span>, <span class="keyword">sizeof</span>(csr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 疎行列に対応するCSR情報取得</span></span><br><span class="line">    <span class="keyword">int</span> non0size = CreateCompactMatrix((<span class="keyword">int</span>*)sparseMatrix, (csrData*)csr_p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// まずは元となる疎行列を二重ループで素直に表現</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"元々\n"</span>);</span><br><span class="line">    Dbg_ShowMatrix((<span class="keyword">int</span>*)sparseMatrix, _SPROW_SIZE, _SPCOL_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上で描いた疎行列に関するCSR情報表示</span></span><br><span class="line">    Dbg_ShowCSRStruct((csrData*)csr_p, non0size);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    CSR</span></span><br><span class="line"><span class="comment">    ROW :  0  2  4  5  7  2  4</span></span><br><span class="line"><span class="comment">    COL :  2  4  2  3  0  1  2</span></span><br><span class="line"><span class="comment">    VAL :  3  4  5  7  1  2  6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最初はROWの 0 to (2-1)から得た値を使用し、COLの[0]to[1]へアクセス。</span></span><br><span class="line">    <span class="comment">// 再現対象の一行目の「２番目・４番目」には「３・４」の値が入っていることがわかる。</span></span><br><span class="line">    <span class="comment">// ROWの次は 2 to (4-1)の値を得て、COLの[2]to[3]へアクセス…　と繰り返すことで配列３つから二次元行列を再現が可能になる。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// CSR要素から「どこに何が入るのか」を(x, y) = value形式で表示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"復活(要素)\n"</span>);</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> loopCnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _SPROW_SIZE ; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j = csr_p-&gt;row[i]; j &lt;= csr_p-&gt;row[i+<span class="number">1</span>]<span class="number">-1</span> ; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> c = csr_p-&gt;col[j];</span><br><span class="line">            <span class="keyword">int</span> v = csr_p-&gt;val[j];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"(%2d, %2d) =&gt; %2d\n"</span>, r, c, v);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ついでに再現用行列の当該カラムに値をぶち込んでおく</span></span><br><span class="line">            sparseMatrix_recon[r][c] = v;</span><br><span class="line"></span><br><span class="line">            loopCnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        r++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再現用行列を二重ループで描く。CSR情報のみで行列の再現が可能なことが判断できる。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"復元(二次元)\n"</span>);</span><br><span class="line">    Dbg_ShowMatrix((<span class="keyword">int</span>*)sparseMatrix, _SPROW_SIZE, _SPCOL_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Size spMat = %lu -&gt; CSR =%lu, loopCount = %d\n"</span>, <span class="keyword">sizeof</span>(sparseMatrix), <span class="keyword">sizeof</span>(csr), loopCnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配列の中身を先頭から指定数表示する（Debug用）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dbg_ShowSomeVal</span><span class="params">(<span class="keyword">int</span> *adr, <span class="keyword">int</span> range)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; range ; i++ ) <span class="built_in">printf</span>(<span class="string">"%2d "</span>, *(adr + i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二次元配列の内容表示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dbg_ShowMatrix</span><span class="params">(<span class="keyword">int</span> *topMtx, <span class="keyword">int</span> rowLength, <span class="keyword">int</span> colLength)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowLength ; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; colLength ; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d "</span>, *(topMtx + c));</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSR処理用各配列内容表示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dbg_ShowCSRStruct</span><span class="params">(csrData *csr_p, <span class="keyword">int</span> non0size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"CSR\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ROW : "</span>);   Dbg_ShowSomeVal(csr_p-&gt;row, non0size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"COL : "</span>);   Dbg_ShowSomeVal(csr_p-&gt;col, non0size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"VAL : "</span>);   Dbg_ShowSomeVal(csr_p-&gt;val, non0size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 疎行列内の非0要素数を数え返却する。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountNonZeroValues</span><span class="params">(<span class="keyword">int</span> *<span class="built_in">array</span>, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cntNonZ = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length ; i++ ) <span class="keyword">if</span>(*(<span class="built_in">array</span> + i) != <span class="number">0</span>) cntNonZ++;</span><br><span class="line">    <span class="keyword">return</span> cntNonZ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 疎行列からCSR用小配列を作成する。</span></span><br><span class="line"><span class="comment">// sparseMatrix = 入力:疎行列</span></span><br><span class="line"><span class="comment">// compactMatrix = 出力:CSR配列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CreateCompactMatrix</span><span class="params">(<span class="keyword">int</span> *sparseMatrix, csrData *csr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *spMtx;</span><br><span class="line">    spMtx = sparseMatrix;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = CountNonZeroValues(spMtx, (_SPROW_SIZE * _SPCOL_SIZE));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tgtVal;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _SPROW_SIZE ; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; _SPCOL_SIZE ; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            tgtVal = *(spMtx + c);</span><br><span class="line">            <span class="keyword">if</span>(tgtVal != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                csr-&gt;col[k] = j;</span><br><span class="line">                csr-&gt;val[k] = tgtVal;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        csr-&gt;row[i + <span class="number">1</span>] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Sample matrix, Use this.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 0 0 3 0 4 |</span><br><span class="line">| 0 0 5 7 0 |</span><br><span class="line">| 1 0 0 0 0 |</span><br><span class="line">| 0 2 6 0 0 |</span><br></pre></td></tr></table></figure><ul><li>This matrix converted CSR 3 matrix, Get this 3.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CSR</span><br><span class="line">ROW :  0  2  4  5  7  2  4</span><br><span class="line">COL :  2  4  2  3  0  1  2</span><br><span class="line">VAL :  3  4  5  7  1  2  6</span><br></pre></td></tr></table></figure><ul><li>Attention to <code>ROW[0] to ROW[1]-1</code>, <code>ROW[1] to ROW[2]-1</code>, <code>ROW[2] to ROW[3]-1</code>, <code>ROW[3] to ROW[4]-1</code> each values.<ul><li>Each ROW values are <code>0 to 1</code>, <code>2 to 3</code>, <code>4 to 4</code>, <code>5 to 6</code>.</li></ul></li><li>By this result, <code>COL[0:1]</code>, <code>COL[2:3]</code>, <code>COL[4:4]</code>, <code>COL[5:6]</code> Each values means <strong>Value exist col index</strong> of 0, 1, 2, 3 each records.<ul><li>On this case, Each COL values are <code>2, 4</code>, <code>2, 3</code>, <code>0</code>, <code>1, 2</code>.</li></ul></li><li>By this result, <code>Column [2, 4] of 0 record</code>, <code>Column [2, 3] of 1 recored</code>… We can see there’s values on this index.</li><li>Specify value contains in <code>VAL[n]</code> array. By <code>Left -&gt; Right / Upper -&gt; Lower</code> order.<ul><li>Get values from this index, Finally we can reproduce input sample matrix.</li></ul></li><li>Normally use this CSR matrix for calculate, But if reproduce again, That should be match with input matrix.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">元々</span><br><span class="line"> 0  0  3  0  4</span><br><span class="line"> 0  0  5  7  0</span><br><span class="line"> 1  0  0  0  0</span><br><span class="line"> 0  2  6  0  0</span><br><span class="line">CSR</span><br><span class="line">ROW :  0  2  4  5  7  2  4</span><br><span class="line">COL :  2  4  2  3  0  1  2</span><br><span class="line">VAL :  3  4  5  7  1  2  6</span><br><span class="line">復活(要素)</span><br><span class="line">( 0,  2) =&gt;  3</span><br><span class="line">( 0,  4) =&gt;  4</span><br><span class="line">( 1,  2) =&gt;  5</span><br><span class="line">( 1,  3) =&gt;  7</span><br><span class="line">( 2,  0) =&gt;  1</span><br><span class="line">( 3,  1) =&gt;  2</span><br><span class="line">( 3,  2) =&gt;  6</span><br><span class="line">復元(二次元)</span><br><span class="line"> 0  0  3  0  4</span><br><span class="line"> 0  0  5  7  0</span><br><span class="line"> 1  0  0  0  0</span><br><span class="line"> 0  2  6  0  0</span><br><span class="line"></span><br><span class="line">Size spMat = 80 -&gt; CSR =148, loopCount = 7</span><br></pre></td></tr></table></figure><h4 id="Next-subject"><a href="#Next-subject" class="headerlink" title="Next subject"></a>Next subject</h4><ul><li>Already done getting data by scraping.</li><li>Already done make matrix by Python.</li><li>Already done Compress sparse matrix by C.</li><li><strong>Next. Call C processing from Python script</strong><ul><li>Maybe it is <em>Cython</em>…</li></ul></li><li>What is rejoice, That is different for all programmers. But for me, that is <strong>Combine other category processing and make result which desired one.</strong></li><li>But always Environment setting is troublesome… I wish it going well Python+C setup.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Compress-Sparse-matrix-by-CSR-CRS-algorithm&quot;&gt;&lt;a href=&quot;#Compress-Sparse-matrix-by-CSR-CRS-algorithm&quot; class=&quot;headerlink&quot; title=&quot;Compre
      
    
    </summary>
    
    
      <category term="C" scheme="https://we-yu.github.io/tags/C/"/>
    
      <category term="CSR" scheme="https://we-yu.github.io/tags/CSR/"/>
    
      <category term="CRS" scheme="https://we-yu.github.io/tags/CRS/"/>
    
      <category term="SparseMatrix" scheme="https://we-yu.github.io/tags/SparseMatrix/"/>
    
  </entry>
  
  <entry>
    <title>pythonによる紳士達の性癖分析：データフレーム編</title>
    <link href="https://we-yu.github.io/2019/03/25/python%E3%81%AB%E3%82%88%E3%82%8B%E7%B4%B3%E5%A3%AB%E9%81%94%E3%81%AE%E6%80%A7%E7%99%96%E5%88%86%E6%9E%90%EF%BC%9A%E3%83%87%E3%83%BC%E3%82%BF%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E7%B7%A8/"/>
    <id>https://we-yu.github.io/2019/03/25/pythonによる紳士達の性癖分析：データフレーム編/</id>
    <published>2019-03-25T15:09:32.000Z</published>
    <updated>2019-03-27T17:57:25.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analyzing-Gentlemen’s-fetishism-by-Web-scraping-from-Doujin-game-site-3rd"><a href="#Analyzing-Gentlemen’s-fetishism-by-Web-scraping-from-Doujin-game-site-3rd" class="headerlink" title="Analyzing Gentlemen’s fetishism by Web-scraping from Doujin-game site : 3rd"></a>Analyzing Gentlemen’s fetishism by Web-scraping from Doujin-game site : 3rd</h2><h3 id="Try-to-create-Matrix-by-DataFrame-On-previous-article-I-crated-by-2-dimension-array"><a href="#Try-to-create-Matrix-by-DataFrame-On-previous-article-I-crated-by-2-dimension-array" class="headerlink" title="Try to create Matrix by DataFrame. On previous article, I crated by 2-dimension-array."></a>Try to create Matrix by DataFrame. On <a href="https://we-yu.github.io/2019/03/24/python%E3%81%AB%E3%82%88%E3%82%8B%E7%B4%B3%E5%A3%AB%E9%81%94%E3%81%AE%E6%80%A7%E7%99%96%E5%88%86%E6%9E%90%EF%BC%9A%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E7%B7%A8/">previous</a> article, I crated by 2-dimension-array.</h3><h4 id="Migrate-from-Array-to-DataFrame"><a href="#Migrate-from-Array-to-DataFrame" class="headerlink" title="Migrate from Array to DataFrame."></a>Migrate from Array to DataFrame.</h4><ul><li>Matrix that created last article, That constructed by 2-D-Array.<ul><li>This is not bad… But Now I use Python. Try to migrate to <strong>DataFrame.</strong></li></ul></li><li>After created 2-D-Matrix, Keep data and create DataFrame.</li></ul><h4 id="Add-code-to-previous-source"><a href="#Add-code-to-previous-source" class="headerlink" title="Add code to previous source."></a>Add code to previous source.</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># :</span></span><br><span class="line"><span class="comment"># (前略)</span></span><br><span class="line"><span class="comment"># :</span></span><br><span class="line"><span class="comment"># 頻出の組み合わせを出力</span></span><br><span class="line"><span class="keyword">for</span> rq <span class="keyword">in</span> ranq :</span><br><span class="line">    print(rq[<span class="string">"val"</span>], rq[<span class="string">"x"</span>], rq[<span class="string">"y"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配列→DataFrame化</span></span><br><span class="line">list_df = pd.DataFrame( columns=tags )</span><br><span class="line"></span><br><span class="line"><span class="comment"># enumerateでiを進めながらxを使用できる。</span></span><br><span class="line"><span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(tags):</span><br><span class="line">    <span class="comment"># TagMatrixから一行作り、DataFrameに追加することを繰り返す。</span></span><br><span class="line">    tmp_se = pd.Series( tagMatrix[x], index=list_df.columns, name=tags[i] )</span><br><span class="line">    list_df = list_df.append( tmp_se )</span><br><span class="line">print( list_df.head() )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 行（横軸）の抽出</span></span><br><span class="line">print(list_df.iloc[<span class="number">3</span>:<span class="number">6</span>, :])</span><br><span class="line"><span class="comment"># 列（縦軸）の抽出</span></span><br><span class="line">print(list_df.iloc[:, <span class="number">3</span>:<span class="number">6</span>].head())</span><br><span class="line"><span class="comment"># タグを指定しての列の抽出</span></span><br><span class="line">tgtLine = [<span class="string">'陵辱'</span>, <span class="string">'逆転無し'</span>]</span><br><span class="line">print(list_df[tgtLine].head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 縦軸で平均算出</span></span><br><span class="line">print(list_df.mean(axis = <span class="number">0</span>))</span><br><span class="line"><span class="comment"># 横軸で合計値算出</span></span><br><span class="line">print(list_df.sum(axis = <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平均</span></span><br><span class="line">list_df.to_csv(<span class="string">"FromDM.csv"</span>)</span><br></pre></td></tr></table></figure><ul><li>Might be basic process is <code>Get 1 line from 2-D-Array -&gt; 1 line append for DataFrame</code>.</li><li>This time matrix isn’t Mathematical Matrix. No need that function. But it able to calculate <code>Average, Sum, others</code>. I should note it.<ul><li>This is useful to export into CSV as easily.</li><li>Can I make it as Upper triangular matrix by 1 command?</li></ul></li><li>To check result, Take diff between <code>CSV exported from 2-D-array</code> and <code>CSV exported by DataFrame</code>.</li></ul><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/6a47c1bd-0522-6e0b-7a21-b89c4ff146d6.png" alt="image"></p><ul><li>There’s diff on header (Null <-> ‘-‘). But remain data confirmed to matched.</-></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Analyzing-Gentlemen’s-fetishism-by-Web-scraping-from-Doujin-game-site-3rd&quot;&gt;&lt;a href=&quot;#Analyzing-Gentlemen’s-fetishism-by-Web-scraping
      
    
    </summary>
    
    
      <category term="Python" scheme="https://we-yu.github.io/tags/Python/"/>
    
      <category term="DataFrame" scheme="https://we-yu.github.io/tags/DataFrame/"/>
    
  </entry>
  
  <entry>
    <title>pythonによる紳士達の性癖分析：Webスクレイピング編</title>
    <link href="https://we-yu.github.io/2019/03/24/python%E3%81%AB%E3%82%88%E3%82%8B%E7%B4%B3%E5%A3%AB%E9%81%94%E3%81%AE%E6%80%A7%E7%99%96%E5%88%86%E6%9E%90%EF%BC%9AWeb%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0%E7%B7%A8/"/>
    <id>https://we-yu.github.io/2019/03/24/pythonによる紳士達の性癖分析：Webスクレイピング編/</id>
    <published>2019-03-24T16:12:39.000Z</published>
    <updated>2019-03-27T17:57:32.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analyzing-Gentlemen’s-fetishism-by-Web-scraping-from-Doujin-game-site-1st"><a href="#Analyzing-Gentlemen’s-fetishism-by-Web-scraping-from-Doujin-game-site-1st" class="headerlink" title="Analyzing Gentlemen’s fetishism by Web-scraping from Doujin-game site : 1st"></a>Analyzing Gentlemen’s fetishism by Web-scraping from Doujin-game site : 1st</h2><h3 id="Get-data-from-Doujin-game-download-web-site-Analyze-popular-genre"><a href="#Get-data-from-Doujin-game-download-web-site-Analyze-popular-genre" class="headerlink" title="Get data from Doujin-game download web-site. Analyze popular genre."></a>Get data from Doujin-game download web-site. Analyze popular genre.</h3><h4 id="Collect-fetishism-data-by-Web-scraping"><a href="#Collect-fetishism-data-by-Web-scraping" class="headerlink" title="Collect fetishism data by Web-scraping."></a>Collect fetishism data by Web-scraping.</h4><ul><li>To review currently Python learning, Do real web-scraping.</li><li>Perhaps someday useful for MachineLearning… I will get ranking data from A Doujin-game website.</li><li>Get data from high-ranking games, We <strong>may</strong> understand recently popular fetish genre by gentlemen.</li><li>I have to show some <strong>Unclean keywords</strong>. Please forgive me, Or <u>you’d better leave from here.</u></li></ul><p><em>Ready?</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re <span class="comment"># 正規表現用</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep      <span class="comment"># 待ち時間用</span></span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint  <span class="comment"># 改行付き配列出力</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">SCRAPING_INTERVAL_TIME = <span class="number">5.5</span></span><br><span class="line"></span><br><span class="line">ranking_category_total = (</span><br><span class="line">    <span class="string">"http://*"</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># https://www.dlsite.com/maniax/ranking</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ページネイションを含め、探査対象となるURL群を取得し配列に格納、返却する。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSearchTargetURLs</span><span class="params">(baseURLs)</span> :</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> basePage <span class="keyword">in</span> baseURLs :</span><br><span class="line">        tgtpage = requests.get(basePage)</span><br><span class="line">        pageUrls = []</span><br><span class="line"></span><br><span class="line">        soup = BeautifulSoup(tgtpage.content, <span class="string">"html.parser"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ページネイションURLを取得</span></span><br><span class="line">        pagenations = soup.select(<span class="string">"li.ranking_pagination_item"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ページネイションが存在しない場合は単一ページだけなので入力URLのみリストに入れ続行</span></span><br><span class="line">        <span class="keyword">if</span> len(pagenations) == <span class="number">0</span> :</span><br><span class="line">            pageUrls.append(basePage)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> pagina <span class="keyword">in</span> pagenations :</span><br><span class="line">            nexturl = pagina.find(<span class="string">'a'</span>, href=<span class="literal">True</span>)</span><br><span class="line">            pageUrls.append(nexturl[<span class="string">'href'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重複要素を削除（順番を保持しない）</span></span><br><span class="line">        pageUrls = list(set(pageUrls))</span><br><span class="line"></span><br><span class="line">    pprint(pageUrls)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pageUrls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 対象のプロダクトページが持つタグをすべて取得。タイトルと合わせて返す。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAttributeTags</span><span class="params">(tgturl)</span> :</span></span><br><span class="line">    tgtpage = requests.get(tgturl)</span><br><span class="line"></span><br><span class="line">    sp = BeautifulSoup(tgtpage.content, <span class="string">"html.parser"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    pageTitle = sp("h1")</span></span><br><span class="line">    pageTitle = sp.select(<span class="string">"h1"</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line"></span><br><span class="line">    elems = sp.find_all(href=re.compile(<span class="string">"work.genre"</span>))</span><br><span class="line"></span><br><span class="line">    tags = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> elems:</span><br><span class="line">        tags.append(e.getText())</span><br><span class="line"></span><br><span class="line">    print(pageTitle, end=<span class="string">" "</span>)</span><br><span class="line">    print(tags)</span><br><span class="line">    <span class="keyword">return</span> pageTitle, tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># メイン処理スタート</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file open</span></span><br><span class="line">f = open(<span class="string">"RankingList.csv"</span>, <span class="string">"w"</span>)</span><br><span class="line">writer = csv.writer(f, lineterminator=<span class="string">"\n"</span>)</span><br><span class="line">header = [<span class="string">"Title"</span>, <span class="string">"Tags"</span>]</span><br><span class="line">writer.writerow(header)</span><br><span class="line"></span><br><span class="line">att_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line">targetURLs = getSearchTargetURLs(ranking_category_total)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> targetURLs:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 対象URL : DLサイトランキング</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第一引数＝解析対象　第二引数＝パーサー(何を元に解析するか：この場合はHTML)</span></span><br><span class="line">    soup = BeautifulSoup(r.content, <span class="string">"html.parser"</span>)</span><br><span class="line"></span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    <span class="comment"># ランキングの順に従ってプロダクト名を取得する</span></span><br><span class="line">    <span class="keyword">for</span> rank <span class="keyword">in</span> soup.select(<span class="string">"dt.work_name"</span>):</span><br><span class="line"></span><br><span class="line">        idx+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># タグ込文字列から個別ページへのURLを抽出（ひとつだけなのでfind_allでなくfind）</span></span><br><span class="line">        tgturl = rank.find(<span class="string">'a'</span>, href=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># rankにはタグ等の情報も含まれているため、タイトルだけ抽出する</span></span><br><span class="line">        <span class="comment"># product_title = rank.getText()</span></span><br><span class="line">        <span class="comment"># product_title = product_title.strip()</span></span><br><span class="line">        <span class="comment"># print(str(idx) + " " + product_title + " " + str(tgturl['href']))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># タグ抽出用関数に個別ページのURLを渡し、タグ群を取得</span></span><br><span class="line">        title, tags = getAttributeTags(tgturl[<span class="string">'href'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;タグ, そのタグを発見した数&#125;の形式で連想配列に格納。</span></span><br><span class="line">        <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">            att_dict[tag] = (att_dict.get(tag) <span class="keyword">or</span> <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        tags.insert(<span class="number">0</span>, title)</span><br><span class="line">        writer.writerow(tags)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (idx == <span class="number">10</span>) :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        sleep(SCRAPING_INTERVAL_TIME)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">61</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 発見したタグとその数の一覧をCSV出力</span></span><br><span class="line">f = open(<span class="string">"TagList.csv"</span>, <span class="string">"w"</span>)</span><br><span class="line">writer = csv.writer(f, lineterminator=<span class="string">"\n"</span>)</span><br><span class="line">header = [<span class="string">"Tag"</span>, <span class="string">"Count"</span>]</span><br><span class="line">writer.writerow(header)</span><br><span class="line"></span><br><span class="line">csvline = []</span><br><span class="line"><span class="keyword">for</span> att <span class="keyword">in</span> att_dict :</span><br><span class="line">    csvline = [att, att_dict[att]]</span><br><span class="line">    writer.writerow(csvline)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul><li>What am I doing? This is simple.<ol><li>Access to Ranking page.</li><li>If there’s paging, Get all URLs.</li><li>Move to each product page on Ranking. Get “Title” and “Tags”.</li></ol></li><li>And also create CSV file of <code>Title, Tag1, Tag2, Tag3, ...</code> and <code>Tag, Count of this Tag</code>. It may use for analyze later…</li><li>I think Title-text doesn’t have copyright. But just in case, Title is</li></ul><p><strong>I don’t recommend try to translate this texts.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Title,Tags</span><br><span class="line">堕落***,女王様/お姫様,ラブラブ/あまあま,退廃/背徳/インモラル,中出し,処女</span><br><span class="line">制服***,癒し,バイノーラル,少女,耳かき,ラブラブ/あまあま,ほのぼの</span><br><span class="line">無口***,少女,セーラー服,電車,無理矢理,中出し,調教</span><br><span class="line">【バ***,癒し,お姉さん,着物/和服,耳かき,中出し,フェラチオ</span><br><span class="line">おい***,逆転無し,人外娘/モンスター娘,ファンタジー,丸呑み,逆レイプ,男性受け</span><br><span class="line">(F***,バイノーラル,足コキ,パイズリ,言葉責め,焦らし,男性受け</span><br><span class="line">ウラ***,ポリゴン,首輪/鎖/拘束具,ムチ/縄/蝋燭,売春/援交,調教,監禁</span><br><span class="line">ニプ***,連続絶頂,戦士,バニーガール,アヘ顔,ツインテール,巨乳/爆乳</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Tag,Count</span><br><span class="line">ポニーテール,6</span><br><span class="line">輪姦,23</span><br><span class="line">スーツ,1</span><br><span class="line">メガネ,2</span><br><span class="line">盗撮,1</span><br><span class="line">陵辱,58</span><br><span class="line">ヤクザ/裏社会,1</span><br><span class="line">女王様/お姫様,9</span><br><span class="line">口内射精,2</span><br></pre></td></tr></table></figure><ul><li>Frequency tags as this. Everyone likes おっぱい…</li></ul><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/16015970-5f9f-0cf6-4a54-ae0eaecb1274.png" alt="image"></p><h4 id="What-use-for"><a href="#What-use-for" class="headerlink" title="What use for?"></a>What use for?</h4><ul><li>Can I find correlations?</li><li>For exsample… Maybe “ASMR, 耳かき” many times appear in same time. “逆レイプ, 言葉責め, 男性受け” also.<ul><li>Conversely, “陵辱, ラブラブ/あまあま” doesn’t have any correlation. Maybe.</li></ul></li><li>Might as well, I corrected this data. Use somehow by python and analyze.</li><li>Result of frequent tags combination survey, Go to <a href="https://we-yu.github.io/2019/03/24/python%E3%81%AB%E3%82%88%E3%82%8B%E7%B4%B3%E5%A3%AB%E9%81%94%E3%81%AE%E6%80%A7%E7%99%96%E5%88%86%E6%9E%90%EF%BC%9A%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E7%B7%A8/">next part</a>.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Analyzing-Gentlemen’s-fetishism-by-Web-scraping-from-Doujin-game-site-1st&quot;&gt;&lt;a href=&quot;#Analyzing-Gentlemen’s-fetishism-by-Web-scraping
      
    
    </summary>
    
    
      <category term="Python" scheme="https://we-yu.github.io/tags/Python/"/>
    
      <category term="Web-scraping" scheme="https://we-yu.github.io/tags/Web-scraping/"/>
    
  </entry>
  
  <entry>
    <title>pythonによる紳士達の性癖分析：データ分析編</title>
    <link href="https://we-yu.github.io/2019/03/24/python%E3%81%AB%E3%82%88%E3%82%8B%E7%B4%B3%E5%A3%AB%E9%81%94%E3%81%AE%E6%80%A7%E7%99%96%E5%88%86%E6%9E%90%EF%BC%9A%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E7%B7%A8/"/>
    <id>https://we-yu.github.io/2019/03/24/pythonによる紳士達の性癖分析：データ分析編/</id>
    <published>2019-03-24T16:12:01.000Z</published>
    <updated>2019-03-27T17:57:18.506Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Analyzing-Gentlemen’s-fetishism-by-Web-scraping-from-Doujin-game-site-2st"><a href="#Analyzing-Gentlemen’s-fetishism-by-Web-scraping-from-Doujin-game-site-2st" class="headerlink" title="Analyzing Gentlemen’s fetishism by Web-scraping from Doujin-game site : 2st"></a>Analyzing Gentlemen’s fetishism by Web-scraping from Doujin-game site : 2st</h2><h3 id="This-time-analyze-2-CSV-files-that-created-on-previous-article"><a href="#This-time-analyze-2-CSV-files-that-created-on-previous-article" class="headerlink" title="This time analyze 2 CSV files that created on previous article."></a>This time analyze 2 CSV files that created on <a href="https://we-yu.github.io/2019/03/24/python%E3%81%AB%E3%82%88%E3%82%8B%E7%B4%B3%E5%A3%AB%E9%81%94%E3%81%AE%E6%80%A7%E7%99%96%E5%88%86%E6%9E%90%EF%BC%9AWeb%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0%E7%B7%A8/">previous</a> article.</h3><h4 id="Analyze-scraping-result"><a href="#Analyze-scraping-result" class="headerlink" title="Analyze scraping result."></a>Analyze scraping result.</h4><ul><li>Targets are 2 files that created on <a href="http://ww" target="_blank" rel="noopener">last time</a></li><li>Maybe we can do many ways. But just this now, Check <strong>Strong relevant</strong> tags.<ul><li>For example, “Wife” tag has low-relevant with “Loli”. But maybe strong-relevant with “Milf”.</li></ul></li><li><strong>Still shows Unmannered keywords as this. Be careful.</strong></li></ul><h4 id="Flow-of-processing"><a href="#Flow-of-processing" class="headerlink" title="Flow of processing"></a>Flow of processing</h4><ul><li>First, Prepare 2-dimensional-array (table) as this.</li></ul><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">ポニーテール</th><th style="text-align:center">輪姦</th><th style="text-align:center">スーツ</th><th style="text-align:center">メガネ</th><th style="text-align:center">盗撮</th><th style="text-align:center">陵辱</th><th style="text-align:center">…</th></tr></thead><tbody><tr><td style="text-align:center">ポニーテール</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">輪姦</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">スーツ</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">メガネ</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">盗撮</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">陵辱</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">-</td></tr></tbody></table><ul><li>Same values in records, columns. Finally this is Square &amp; Zero matrix.</li><li>We already created “tags count” CSV on last time.</li><li>Read “Title, Tags” CSV. Correspond cell increment as +1.<ul><li>For example, If read tags as <code>輪姦, 陵辱, ポニーテール</code>. (Maybe this product some ponytail girl will be suffer)</li><li>After that, Above table changes as this.</li></ul></li></ul><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">ポニーテール</th><th style="text-align:center">輪姦</th><th style="text-align:center">スーツ</th><th style="text-align:center">メガネ</th><th style="text-align:center">盗撮</th><th style="text-align:center">陵辱</th><th style="text-align:center">…</th></tr></thead><tbody><tr><td style="text-align:center">ポニーテール</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">輪姦</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">スーツ</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">メガネ</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">盗撮</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">陵辱</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">-</td></tr></tbody></table><ul><li>Then next. Read tags as <code>スーツ, 輪姦, 陵辱</code>. (Might be suit lady got some terrible trouble)</li></ul><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">ポニーテール</th><th style="text-align:center">輪姦</th><th style="text-align:center">スーツ</th><th style="text-align:center">メガネ</th><th style="text-align:center">盗撮</th><th style="text-align:center">陵辱</th><th style="text-align:center">…</th></tr></thead><tbody><tr><td style="text-align:center">ポニーテール</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">輪姦</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">スーツ</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">メガネ</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">盗撮</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">陵辱</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">…</td></tr><tr><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">:</td><td style="text-align:center">-</td></tr></tbody></table><ul><li>Continue as this for all products in ranking. Analyze <strong>Which tags combination is most close?</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># CSV読み込み・配列の添字・二次元辞書・キュー</span></span><br><span class="line"><span class="comment"># ランキング製品のタグの組み合わせの数をカウントする。</span></span><br><span class="line"></span><br><span class="line">RANKING_CSV_FILENAME = <span class="string">'RankingList.csv'</span></span><br><span class="line">DLTAGS_CSV_FILENAME = <span class="string">'TagList.csv'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 頻出すぎたり性癖に直結しない系統のタグはいったん外す。</span></span><br><span class="line">IGNORE_TAGS = (<span class="string">"バイノーラル"</span>, <span class="string">"中出し"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ランキング作品のタグ群を配列に読み込む。</span></span><br><span class="line">csv_file = open(RANKING_CSV_FILENAME, <span class="string">"r"</span>)</span><br><span class="line">f = csv.reader(csv_file, delimiter=<span class="string">","</span>, doublequote=<span class="literal">True</span>, lineterminator=<span class="string">"\r\n"</span>, quotechar=<span class="string">'"'</span>, skipinitialspace=<span class="literal">True</span>)</span><br><span class="line">header = next(f)</span><br><span class="line">productMatrix = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> f:</span><br><span class="line">    <span class="comment"># 左端はタイトルなので今回は不要。読み飛ばすため[1:]で指定。</span></span><br><span class="line">    t = row[<span class="number">1</span>:]</span><br><span class="line">    <span class="comment"># タグが無い作品については無視する</span></span><br><span class="line">    <span class="keyword">if</span> (len(t) &gt; <span class="number">0</span>) :</span><br><span class="line">        productMatrix.append(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># タグリストを読み込む（以降これは変更されない）</span></span><br><span class="line">tags = []</span><br><span class="line">csv_file = open(DLTAGS_CSV_FILENAME, <span class="string">"r"</span>)</span><br><span class="line">f = csv.reader(csv_file, delimiter=<span class="string">","</span>, doublequote=<span class="literal">True</span>, lineterminator=<span class="string">"\r\n"</span>, quotechar=<span class="string">'"'</span>, skipinitialspace=<span class="literal">True</span>)</span><br><span class="line">header = next(f)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> f:</span><br><span class="line">    tags.append(row[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [tags][tags]の二次元辞書を生成する。</span></span><br><span class="line">tagMatrix = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tags :</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> tags :</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (x <span class="keyword">in</span> tagMatrix):</span><br><span class="line">            tagMatrix[x] = &#123;&#125;</span><br><span class="line">        <span class="comment"># 初期値は0とする</span></span><br><span class="line">        tagMatrix[x][y] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># productMatrixの1rowが「1製品の持つタグ群」になる。</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> productMatrix :</span><br><span class="line">    <span class="comment"># 暫定処理。現状、タグの設定が["xxx", "yyy]だった場合はtagMatrix["xxx"]["yyy"]と["yyy"]["xxx"]の両方でカウントする。</span></span><br><span class="line">    <span class="comment"># 必要なのは「組み合わせの数」なのでどちらかだけでよい。（最終的には疎行列かつ三角行列になるはず）</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> x :</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> x :</span><br><span class="line">            tagMatrix[y][z] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> z <span class="keyword">in</span> x:</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> x:</span><br><span class="line">            tagMatrix[y][z] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 頻出ランキング作成のためにサイズ5のキューを作成する。</span></span><br><span class="line">ranq = deque([], <span class="number">5</span>)</span><br><span class="line"><span class="comment"># Qへの初期値設定</span></span><br><span class="line">qInit = &#123;<span class="string">"val"</span>: <span class="number">-1</span>, <span class="string">"x"</span>: <span class="string">""</span>, <span class="string">"y"</span>: <span class="string">""</span>&#125;</span><br><span class="line">ranq.appendleft(qInit)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tax*tagでマトリクスの全要素へアクセス可能。</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tags :</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> tags :</span><br><span class="line"></span><br><span class="line">        is_continue = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 対角要素は意味がないのですべて-1とする。</span></span><br><span class="line">        <span class="keyword">if</span> (x == y) :</span><br><span class="line">            tagMatrix[x][y] = <span class="number">-1</span></span><br><span class="line">        <span class="comment"># Qの左端要素の「出現回数」を超過するものがあった場合、当該要素をQの左側から入れる。</span></span><br><span class="line">        <span class="keyword">if</span> (tagMatrix[x][y] &gt; ranq[<span class="number">0</span>][<span class="string">"val"</span>]) :</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> ignore <span class="keyword">in</span> IGNORE_TAGS :</span><br><span class="line">                <span class="keyword">if</span>(x == ignore <span class="keyword">or</span> y == ignore) :</span><br><span class="line">                    is_continue = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(is_continue) :</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            max = &#123;<span class="string">"val"</span>:tagMatrix[x][y], <span class="string">"x"</span>:x, <span class="string">"y"</span>:y&#125;</span><br><span class="line">            ranq.appendleft(max)</span><br><span class="line"></span><br><span class="line"><span class="comment"># CSVのヘッダ行生成。左端に"-"を入れる。</span></span><br><span class="line">h = copy.deepcopy(tags) <span class="comment"># 強いコピー</span></span><br><span class="line">h.insert(<span class="number">0</span>, <span class="string">"-"</span>)</span><br><span class="line">csvHeader = <span class="string">","</span>.join(h)</span><br><span class="line"></span><br><span class="line"><span class="comment"># タグの出現数をまとめた二次元配列出力</span></span><br><span class="line">f = open(<span class="string">"TagMatrix.csv"</span>, <span class="string">"w"</span>)</span><br><span class="line">writer = csv.writer(f, lineterminator=<span class="string">"\n"</span>)</span><br><span class="line">writer.writerow(h)</span><br><span class="line"></span><br><span class="line">csvLine = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tags :</span><br><span class="line">    <span class="comment"># csvLine = [tag名, tag1との組み合わせ数, tag2との組み合わせ数, tag3との組み合わせの数…]という構成になる。</span></span><br><span class="line">    csvLine.append(x)</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> tags :</span><br><span class="line">        csvLine.append(tagMatrix[x][y])</span><br><span class="line">    writer.writerow(csvLine)</span><br><span class="line">    csvLine.clear()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 頻出の組み合わせを出力</span></span><br><span class="line"><span class="keyword">for</span> rq <span class="keyword">in</span> ranq :</span><br><span class="line">    print(rq[<span class="string">"val"</span>], rq[<span class="string">"x"</span>], rq[<span class="string">"y"</span>])</span><br></pre></td></tr></table></figure><ul><li>This is all code. Sorry I’m not expert about Python, Maybe this is not clean code.</li><li>Table on top of article export as CSV. (It easy to use for spreadsheet application)<ul><li>Diagonal elements are unnecessary. Any value is ok, Just this time set as <code>-1</code>.</li></ul></li></ul><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/0b9b469c-9acf-a681-3341-5252dddd7223.png" alt="image"></p><h4 id="View-result-data"><a href="#View-result-data" class="headerlink" title="View result data"></a>View result data</h4><ul><li>Finally I got some data. Try to do something.</li><li>Pickup some frequent tags.<ul><li><code>巨乳/爆乳, 陵辱, ラブラブ/あまあま, 男性受け, 人外娘/モンスター娘</code> : <code>(Boobs, Insult, Lovelove/Sweet, Femdom, Monster-girl)</code></li></ul></li><li>Put this tags as vertical. Let me check frequent tags…</li></ul><h5 id="Boobs"><a href="#Boobs" class="headerlink" title="Boobs"></a>Boobs</h5><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/1b89c708-d094-3e0e-0498-c0d7c001257b.png" alt="image"></p><p>わかりみ。</p><h5 id="Insult"><a href="#Insult" class="headerlink" title="Insult"></a>Insult</h5><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/520b8106-a30d-6f60-b049-e1446861fa2e.png" alt="image"></p><p><strong>Syokusyu(Tentacles)</strong> is traditional Japanese culture since <a href="https://en.wikipedia.org/wiki/The_Dream_of_the_Fisherman%27s_Wife" target="_blank" rel="noopener">Katsushika Hokusai</a>… Maybe.</p><h5 id="Lovelove-Sweet"><a href="#Lovelove-Sweet" class="headerlink" title="Lovelove-Sweet"></a>Lovelove-Sweet</h5><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/6d2897db-b14c-e075-9145-4c8e539a7f5d.png" alt="image"></p><p>On this case, a lot of positive image tags.</p><h5 id="Femdom"><a href="#Femdom" class="headerlink" title="Femdom"></a>Femdom</h5><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/1a1e4c9a-e1fc-4e14-bb51-6084bcb812bc.png" alt="image"></p><p>Oh… yeah.</p><h5 id="Monster-girl"><a href="#Monster-girl" class="headerlink" title="Monster-girl"></a>Monster-girl</h5><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/0d9acec3-0e39-533e-c1a3-9f97f274622e.png" alt="image"></p><p><img src="http://tn.smilevideo.jp/smile?i=21780747.L" alt="image"></p><hr><ul><li>Next. Pickup more “Particular” tags. (Some gentlemen has strong feeling for this habits)</li></ul><h5 id="NTR"><a href="#NTR" class="headerlink" title="NTR"></a>NTR</h5><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/9ad9b4f3-8005-c8b7-be98-b4d8f26c3de4.png" alt="image"></p><p>NTR and Netorare, They are 2 sides of the same coin…</p><h5 id="Futanari"><a href="#Futanari" class="headerlink" title="Futanari"></a>Futanari</h5><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/6079a581-961b-2f69-6c22-79c27566eaa7.png" alt="image"></p><p>Maybe enemy Mistress force to downfall(to darkside) for heroines.</p><h5 id="Darkside"><a href="#Darkside" class="headerlink" title="Darkside"></a>Darkside</h5><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/81248dff-c9f7-188c-373a-00c3134fb4c7.png" alt="image"></p><p>From this side, Maybe Mahou-shoujo going to be brainwashed, That is always.</p><h5 id="None-reversal"><a href="#None-reversal" class="headerlink" title="None-reversal"></a>None-reversal</h5><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/d90cf96a-0f9c-c5a4-593c-b3d813c1caa9.png" alt="image"></p><p>Strong combination of <strong>None-reversal, Femdom, Reversed rape</strong></p><h4 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h4><ul><li>Quite fan.</li></ul><h4 id="Loose-ends"><a href="#Loose-ends" class="headerlink" title="Loose ends"></a>Loose ends</h4><ul><li>Now get frequent tags by deque. Maybe still remain some issues. Need to enhance.</li><li>By Python, If use <strong>Data format</strong> we can make matrix more easy?</li><li>We want to know only “Tags combination” For example, <code>tagMatrix[&quot;陵辱&quot;][&quot;ポニーテール&quot;]</code> and <code>tagMatrix[&quot;ポニーテール&quot;][&quot;陵辱&quot;]</code>, 1 side is enough.<ul><li>Now this is Diagonal matrix. But finally Upper(Lower) triangular matrix is enough.</li></ul></li><li>Maybe 6 tags are maximum of 1 product.<ul><li>Search more products, Matrix getting huge. But almost elements are 0. This is Sparse matrix.</li><li>I don’t think modern PC memory flood by 1000 or 2000 tags, But anyway we should use waist resources. I want to install sparse-matrix algorithm.</li><li>As Y-Matrix my old work.</li></ul></li><li>Can I add <strong>Weight</strong> for tags combination from Ranking-score and sells-score.</li><li>It was good practice for Python. <strong>But I don’t have idea how to use it.</strong><ul><li>If I make good learning, Can I do predict next coming popular genre…?</li></ul></li><li>If you have some ideas, Please post <a href="https://qiita.com/we-yu/items/d98050e0de94914b15b7" target="_blank" rel="noopener">here</a><ul><li>Or <a href="https://docs.google.com/spreadsheets/d/12zU3987Ehv8CT4zhfZ9JmVMUmMGDqUhYBnUZyNfavUM/edit?usp=sharing" target="_blank" rel="noopener">Above CSV is here.</a> You may use this for your ideas.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Analyzing-Gentlemen’s-fetishism-by-Web-scraping-from-Doujin-game-site-2st&quot;&gt;&lt;a href=&quot;#Analyzing-Gentlemen’s-fetishism-by-Web-scraping
      
    
    </summary>
    
    
      <category term="Python" scheme="https://we-yu.github.io/tags/Python/"/>
    
      <category term="Doujin-game" scheme="https://we-yu.github.io/tags/Doujin-game/"/>
    
  </entry>
  
  <entry>
    <title>sympyによる導関数の算出・描画</title>
    <link href="https://we-yu.github.io/2019/03/24/sympy%E3%81%AB%E3%82%88%E3%82%8B%E5%B0%8E%E9%96%A2%E6%95%B0%E3%81%AE%E7%AE%97%E5%87%BA%E3%83%BB%E6%8F%8F%E7%94%BB/"/>
    <id>https://we-yu.github.io/2019/03/24/sympyによる導関数の算出・描画/</id>
    <published>2019-03-24T15:38:35.000Z</published>
    <updated>2019-03-27T17:55:23.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Calculate-amp-Draw-Derived-function-by-simpy"><a href="#Calculate-amp-Draw-Derived-function-by-simpy" class="headerlink" title="Calculate &amp; Draw Derived function by simpy"></a>Calculate &amp; Draw Derived function by simpy</h2><h3 id="Use-simpy-Drawing-Derived-function-graph"><a href="#Use-simpy-Drawing-Derived-function-graph" class="headerlink" title="Use simpy, Drawing Derived function graph."></a>Use simpy, Drawing Derived function graph.</h3><h4 id="Calculate-amp-Draw-Derived-function"><a href="#Calculate-amp-Draw-Derived-function" class="headerlink" title="Calculate &amp; Draw Derived function"></a>Calculate &amp; Draw Derived function</h4><ul><li>Detail setting should be investigate later.</li><li>On First step, make it as most simple.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy <span class="keyword">as</span> sy</span><br><span class="line"></span><br><span class="line">x = sy.Symbol(<span class="string">'x'</span>)</span><br><span class="line"></span><br><span class="line">f = (<span class="number">1</span> * x**<span class="number">3</span>) + (<span class="number">0</span> * x**<span class="number">2</span>) + (<span class="number">-2</span> * x) + (<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> f</span><br><span class="line"></span><br><span class="line">g = f.diff()</span><br><span class="line"><span class="keyword">print</span> g</span><br><span class="line"></span><br><span class="line">sy.plot(f, g, (x, <span class="number">-2</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hogehoge$ python plot2.py</span><br><span class="line">x**3 - 2*x</span><br><span class="line">3*x**2 - 2</span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/345352d4-9070-df8d-ab83-fc5d2abacbbf.png" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Calculate-amp-Draw-Derived-function-by-simpy&quot;&gt;&lt;a href=&quot;#Calculate-amp-Draw-Derived-function-by-simpy&quot; class=&quot;headerlink&quot; title=&quot;Calc
      
    
    </summary>
    
    
      <category term="Python" scheme="https://we-yu.github.io/tags/Python/"/>
    
      <category term="simpy" scheme="https://we-yu.github.io/tags/simpy/"/>
    
      <category term="Python2.7" scheme="https://we-yu.github.io/tags/Python2-7/"/>
    
  </entry>
  
  <entry>
    <title>Udemy - ゼロからPythonで学ぶ人工知能と機械学習 : ニューラルネットワークまとめ</title>
    <link href="https://we-yu.github.io/2019/03/23/Udemy-%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89Python%E3%81%A7%E5%AD%A6%E3%81%B6%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E3%81%A8%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92-%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%A9%E3%83%AB%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%BE%E3%81%A8%E3%82%81/"/>
    <id>https://we-yu.github.io/2019/03/23/Udemy-ゼロからPythonで学ぶ人工知能と機械学習-ニューラルネットワークまとめ/</id>
    <published>2019-03-23T10:41:32.000Z</published>
    <updated>2019-03-27T17:57:54.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Udemy-ゼロからPythonで学ぶ人工知能と機械学習-ニューラルネットワークまとめ"><a href="#Udemy-ゼロからPythonで学ぶ人工知能と機械学習-ニューラルネットワークまとめ" class="headerlink" title="Udemy - ゼロからPythonで学ぶ人工知能と機械学習 : ニューラルネットワークまとめ"></a>Udemy - ゼロからPythonで学ぶ人工知能と機械学習 : ニューラルネットワークまとめ</h2><h3 id="みんなのAI講座-ゼロからPythonで学ぶ人工知能と機械学習"><a href="#みんなのAI講座-ゼロからPythonで学ぶ人工知能と機械学習" class="headerlink" title="みんなのAI講座 ゼロからPythonで学ぶ人工知能と機械学習"></a><a href="https://www.udemy.com/learning-ai/learn/v4/overview" target="_blank" rel="noopener">みんなのAI講座 ゼロからPythonで学ぶ人工知能と機械学習</a></h3><p><small>AI Class : Learn AI and MachineLearning by Python from scratch <strong>Overall</strong></small></p><p>This is overall for me, About Neuron Network session.</p><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/72f19548-1350-f996-1540-e7b89ad86303.png" alt="NeuronNetwork.png" title="抽出概要"></p><h4 id="Neuron-Class"><a href="#Neuron-Class" class="headerlink" title="Neuron Class"></a>Neuron Class</h4><ul><li>This is define of Neuron that works as node in network.</li><li>IN:OUT is N:1. Input is multiple, But output is always 1. (However, Output <strong>destination</strong> is not always only one)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Neuron</span>:</span></span><br><span class="line">    input_sum = <span class="number">0.0</span>  <span class="comment"># 最終的にこの値が少しずつ増える</span></span><br><span class="line">    output = <span class="number">0.0</span>  <span class="comment"># output用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setInput</span><span class="params">(self, inp)</span>:</span></span><br><span class="line">        self.input_sum += inp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOutput</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.output = sigmoid(self.input_sum)</span><br><span class="line">        <span class="keyword">return</span> self.output</span><br><span class="line"></span><br><span class="line">    <span class="comment"># input/output values intialize</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.input_sum = <span class="number">0</span></span><br><span class="line">        self.output = <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="Neural-Network-Class"><a href="#Neural-Network-Class" class="headerlink" title="Neural Network Class"></a>Neural Network Class</h4><ul><li>Define of Neural Network constructed by several Neurons.</li><li><code>w_im</code> = 3 weights for value of [Input-Neuron -&gt; Middle-Neuron] and [Bias -&gt; M-Neuron].<ul><li>Same as this, [w_mo] is Weights of Middle -&gt; Output layer.</li></ul></li><li>If code like <code>C</code>, Number of weights of <code>w_im[x][y]</code>. Each value means <code>x = Number of Input nodes, y = Number of Destination nodes</code>.<ul><li>On this code, Inputs are <code>Neuron, Neuron, Bias</code>. Destinations are <code>Neuron, Neuron</code> (Bias is not node). Finally 3 * 2, Total 6 weights.</li></ul></li><li>Defined nodes are 3 + 3 + 1.<ul><li>Initial output of Input Neurons are fixed by 0, 0. And Bias also fixed as 1.0.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="comment"># 入力値の重みづけ</span></span><br><span class="line">    <span class="comment"># 入力層・中間層間の重み</span></span><br><span class="line">    w_im = [[<span class="number">0.496</span>, <span class="number">0.512</span>], [<span class="number">-0.501</span>, <span class="number">0.998</span>], [<span class="number">0.498</span>, <span class="number">-0.502</span>]]  <span class="comment"># 第一入力NEU→各中間NEUの重み, 第二入力NEU→各中間NEUの重み, 入力バイアス→各中間NEUの重み</span></span><br><span class="line">    <span class="comment"># 中間層・出力層間の重み</span></span><br><span class="line">    w_mo = [<span class="number">0.121</span>, <span class="number">-0.4996</span>, <span class="number">0.200</span>]  <span class="comment"># 第一中間NEU→出力NEUの重み, 第二中間NEU→出力NEUの重み, 中間バイアス→出力NEUの重み</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 各層宣言</span></span><br><span class="line">    <span class="comment"># 入力層：N（ニューロン）、N、バイアス　入力層は数値がそのまま入る</span></span><br><span class="line">    input_layer = [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]</span><br><span class="line">    <span class="comment"># 中間層：Nインスタンス、Nインスタンス、バイアス</span></span><br><span class="line">    middle_layer = [Neuron(), Neuron(), <span class="number">1.0</span>]</span><br><span class="line">    <span class="comment"># Nはひとつだけ</span></span><br><span class="line">    output_layer = Neuron()</span><br></pre></td></tr></table></figure><h3 id="Commit-function"><a href="#Commit-function" class="headerlink" title="Commit function"></a>Commit function</h3><ul><li>Input 2 values (On this time, <code>input_data[0/1]</code> is latitude and longitude), And each weights. Get finally network output(= Last node’s output).</li><li>For example, Input for Middle-1st-node. This value get from Each <code>input-node-output * weight + Bias * weight</code>.</li><li>Bias’s output is always same. But <strong>Input from Bias</strong> is changeable.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Receive inputs,</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">commit</span><span class="params">(self, input_data)</span>:</span></span><br><span class="line">    <span class="comment"># 各層ニューロン初期化</span></span><br><span class="line">    self.input_layer[<span class="number">0</span>] = input_data[<span class="number">0</span>]</span><br><span class="line">    self.input_layer[<span class="number">1</span>] = input_data[<span class="number">1</span>]</span><br><span class="line">    self.middle_layer[<span class="number">0</span>].reset()</span><br><span class="line">    self.middle_layer[<span class="number">1</span>].reset()</span><br><span class="line">    self.output_layer.reset()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 入力層→中間層</span></span><br><span class="line">    <span class="comment"># 第一中間ニューロンに入力３つ</span></span><br><span class="line">    nr_idx = <span class="number">0</span></span><br><span class="line">    self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">0</span>] * self.w_im[<span class="number">0</span>][nr_idx])  <span class="comment"># 第一入力N出力値×対応重み</span></span><br><span class="line">    self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">1</span>] * self.w_im[<span class="number">1</span>][nr_idx])</span><br><span class="line">    self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">2</span>] * self.w_im[<span class="number">2</span>][nr_idx])  <span class="comment"># バイアス</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二中間ニューロンに入力３つ</span></span><br><span class="line">    nr_idx = <span class="number">1</span></span><br><span class="line">    self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">0</span>] * self.w_im[<span class="number">0</span>][nr_idx])</span><br><span class="line">    self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">1</span>] * self.w_im[<span class="number">1</span>][nr_idx])</span><br><span class="line">    self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">2</span>] * self.w_im[<span class="number">2</span>][nr_idx])  <span class="comment"># バイアス</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中間層→出力層</span></span><br><span class="line">    self.output_layer.setInput(self.middle_layer[<span class="number">0</span>].getOutput() * self.w_mo[<span class="number">0</span>])</span><br><span class="line">    self.output_layer.setInput(self.middle_layer[<span class="number">1</span>].getOutput() * self.w_mo[<span class="number">1</span>])</span><br><span class="line">    self.output_layer.setInput(self.middle_layer[<span class="number">2</span>] * self.w_mo[<span class="number">2</span>])  <span class="comment"># バイアス</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.output_layer.getOutput()  <span class="comment"># ニューラルネットワーク全体の出力値が帰る</span></span><br></pre></td></tr></table></figure><h3 id="Learning-function"><a href="#Learning-function" class="headerlink" title="Learning function"></a>Learning function</h3><ul><li>Finally, Code structure became as Learn-func ∋ Commit-func. Call Learning func for use Network.</li><li>I have to check again Video for relearn. Anyway, After got “Output value of network”. Need to adjust each <code>weight</code> values.<ol><li>Calculate “Diff of Network-output-value and Correct-value.”</li><li>By [1] value, Adjust weight between [Middle-layer and Output-layer].</li><li>By [Old M-O weight] and [2] value (New M-O weight), Calculate weight between [Input-layer and Middle-layer].</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">learn</span><span class="params">(self, input_data)</span>:</span></span><br><span class="line">    <span class="comment"># 出力値 コミットに緯度と経度を渡す ニューラルネットワークの出力値が帰る</span></span><br><span class="line">    output_data = self.commit([input_data[<span class="number">0</span>], input_data[<span class="number">1</span>]])</span><br><span class="line">    <span class="comment"># 学習する correct_valueに0/1で正解/不正解</span></span><br><span class="line">    correct_value = input_data[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print output_data</span></span><br><span class="line">    <span class="comment"># print (correct_value - output_data) # 出力/正解値の誤差</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># δmo = (出力値 - 正解値) * 出力の微分: 入力層・中間層修正にも使う</span></span><br><span class="line">    <span class="comment"># 差分が小さい／大きいときは修正量が小さくなる、真ん中ぐらいだと大きくなる</span></span><br><span class="line">    <span class="comment"># 中間層ー出力層：修正量 = δmo * 中間層の値 * 学習係数(定数：大きすぎると重みの値が発散する、小さすぎると時間がかかる)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学習係数(定数)</span></span><br><span class="line">    K = <span class="number">0.3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 出力層→中間層</span></span><br><span class="line">    <span class="comment"># 差分 * (微分値) ※シグモイド関数による微分は「n * (1 - n)」になる。</span></span><br><span class="line">    delta_w_mo = (correct_value - output_data) * output_data * (<span class="number">1.0</span> - output_data)</span><br><span class="line">    <span class="comment"># 変更前重み</span></span><br><span class="line">    old_w_mo = list(self.w_mo)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重み更新 中間層出力値 * δ * 固定係数</span></span><br><span class="line">    self.w_mo[<span class="number">0</span>] += self.middle_layer[<span class="number">0</span>].output * delta_w_mo * K</span><br><span class="line">    self.w_mo[<span class="number">1</span>] += self.middle_layer[<span class="number">1</span>].output * delta_w_mo * K</span><br><span class="line">    self.w_mo[<span class="number">2</span>] += self.middle_layer[<span class="number">2</span>] * delta_w_mo * K <span class="comment"># バイアス</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># δim = δmo * 中間出力の重み * 中間層微分値</span></span><br><span class="line">    <span class="comment"># 入力層ー中間層：修正量 = δim * 入力層の値 * 学習係数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中間→入力層</span></span><br><span class="line">    delta_w_im = [</span><br><span class="line">        delta_w_mo * old_w_mo[<span class="number">0</span>] * self.middle_layer[<span class="number">0</span>].output * (<span class="number">1.0</span> - self.middle_layer[<span class="number">0</span>].output),</span><br><span class="line">        delta_w_mo * old_w_mo[<span class="number">1</span>] * self.middle_layer[<span class="number">1</span>].output * (<span class="number">1.0</span> - self.middle_layer[<span class="number">1</span>].output),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重み更新 中間数はニューロン２つ　入力層はバイアス+ニューロンで３つ</span></span><br><span class="line">    self.w_im[<span class="number">0</span>][<span class="number">0</span>] += self.input_layer[<span class="number">0</span>] * delta_w_im[<span class="number">0</span>] * K <span class="comment"># I1-M1</span></span><br><span class="line">    self.w_im[<span class="number">0</span>][<span class="number">1</span>] += self.input_layer[<span class="number">0</span>] * delta_w_im[<span class="number">1</span>] * K <span class="comment"># I1-M2</span></span><br><span class="line">    self.w_im[<span class="number">1</span>][<span class="number">0</span>] += self.input_layer[<span class="number">1</span>] * delta_w_im[<span class="number">0</span>] * K <span class="comment"># I2-M1</span></span><br><span class="line">    self.w_im[<span class="number">1</span>][<span class="number">1</span>] += self.input_layer[<span class="number">1</span>] * delta_w_im[<span class="number">1</span>] * K <span class="comment"># I2-M2</span></span><br><span class="line">    self.w_im[<span class="number">2</span>][<span class="number">0</span>] += self.input_layer[<span class="number">2</span>] * delta_w_im[<span class="number">0</span>] * K <span class="comment"># IB-M1</span></span><br><span class="line">    self.w_im[<span class="number">2</span>][<span class="number">1</span>] += self.input_layer[<span class="number">2</span>] * delta_w_im[<span class="number">1</span>] * K <span class="comment"># IB-M2</span></span><br><span class="line">    <span class="comment"># I1 = 入力層第一ニューロン M1 = 中間層第一ニューロン IB = 入力層バイアス</span></span><br></pre></td></tr></table></figure><h3 id="Main-process"><a href="#Main-process" class="headerlink" title="Main process"></a>Main process</h3><ul><li>Read read as below. (Latitude, Longitude, Correct flag(0/1))</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">35.37,138.08,0</span><br><span class="line">35.4,138.4,0</span><br><span class="line">35.08,138.05,1</span><br><span class="line">35.14,138.23,0</span><br><span class="line">35.26,137.84,1</span><br><span class="line">:</span><br><span class="line">:</span><br></pre></td></tr></table></figure><ul><li>Instantiate Neural Network, Then kick learning 1000*100 times.</li><li>print for learned <code>weights</code>.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基準点(データの範囲を0.0〜1.0内に収める為)</span></span><br><span class="line">refer_point_0 = <span class="number">34.5</span></span><br><span class="line">refer_point_1 = <span class="number">137.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read data</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">training_data = []</span><br><span class="line">training_data_file = open(<span class="string">"training_data.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> training_data_file:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    line = line.rstrip().split(<span class="string">","</span>)  <span class="comment"># 改行を取り除き,で分ける</span></span><br><span class="line">    training_data.append([float(line[<span class="number">0</span>]) - refer_point_0, float(line[<span class="number">1</span>]) - refer_point_1, int(line[<span class="number">2</span>])])</span><br><span class="line">training_data_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print training_data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create NeuralNework instance</span></span><br><span class="line">neural_network = NeuralNetwork()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 学習（一度のみ）</span></span><br><span class="line"><span class="comment"># neural_network.learn(training_data[0])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 学習（繰り返し）</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range (<span class="number">0</span>, <span class="number">1000</span>) : <span class="comment"># 1000回学習</span></span><br><span class="line">    ii = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> training_data : <span class="comment"># 各データに対し実施（100回）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((t % <span class="number">100</span> == <span class="number">0</span>) <span class="keyword">and</span> (ii == <span class="number">0</span> <span class="keyword">or</span> ii == <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">print</span> t, <span class="string">":"</span>,</span><br><span class="line">            <span class="keyword">print</span> neural_network.w_im,</span><br><span class="line">            <span class="keyword">print</span> neural_network.w_mo</span><br><span class="line"></span><br><span class="line">        ii += <span class="number">1</span></span><br><span class="line">        neural_network.learn(data) <span class="comment"># t * 100回学習</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> neural_network.w_im</span><br><span class="line"><span class="keyword">print</span> neural_network.w_mo</span><br></pre></td></tr></table></figure><h3 id="Plot-for-Training-data-Real-data"><a href="#Plot-for-Training-data-Real-data" class="headerlink" title="Plot for Training data, Real data."></a>Plot for Training data, Real data.</h3><ul><li>Classificate read data from text. And real latitude, longitude data.</li><li>Around here, We have to check again on class.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 訓練用データ表示の準備</span></span><br><span class="line">position_tokyo_leaning = [[], []]</span><br><span class="line">position_kanagawa_leaning = [[], []]</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> training_data:</span><br><span class="line">    <span class="keyword">if</span> data[<span class="number">2</span>] &lt; <span class="number">0.5</span>:  <span class="comment"># 正解値が0.5以下（＝0）である場合</span></span><br><span class="line">        position_tokyo_leaning[<span class="number">0</span>].append(data[<span class="number">1</span>] + refer_point_1)  <span class="comment"># 経度</span></span><br><span class="line">        position_tokyo_leaning[<span class="number">1</span>].append(data[<span class="number">0</span>] + refer_point_0)  <span class="comment"># 緯度</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        position_kanagawa_leaning[<span class="number">0</span>].append(data[<span class="number">1</span>] + refer_point_1)</span><br><span class="line">        position_kanagawa_leaning[<span class="number">1</span>].append(data[<span class="number">0</span>] + refer_point_0)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 実データで実行（答え合わせ）</span></span><br><span class="line">data_to_commit = [[<span class="number">34.6</span>, <span class="number">138.0</span>], [<span class="number">34.6</span>, <span class="number">138.18</span>], [<span class="number">35.4</span>, <span class="number">138.0</span>], [<span class="number">34.98</span>, <span class="number">138.1</span>], [<span class="number">35.0</span>, <span class="number">138.25</span>], [<span class="number">35.4</span>, <span class="number">137.6</span>], [<span class="number">34.98</span>, <span class="number">137.52</span>], [<span class="number">34.5</span>, <span class="number">138.5</span>], [<span class="number">35.4</span>, <span class="number">138.1</span>]]</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> data_to_commit : <span class="comment"># 緯度経度を0-1の中に収める</span></span><br><span class="line">    data[<span class="number">0</span>] -= refer_point_0</span><br><span class="line">    data[<span class="number">1</span>] -= refer_point_1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分類したデータを格納する</span></span><br><span class="line">position_tokyo_learned = [[], []]</span><br><span class="line">position_kanagawa_learned = [[], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> data_to_commit:</span><br><span class="line">    <span class="keyword">if</span> neural_network.commit(data) &lt; <span class="number">0.5</span> :</span><br><span class="line">        position_tokyo_learned[<span class="number">0</span>].append(data[<span class="number">1</span>] + refer_point_1)</span><br><span class="line">        position_tokyo_learned[<span class="number">1</span>].append(data[<span class="number">0</span>] + refer_point_0)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        position_kanagawa_learned[<span class="number">0</span>].append(data[<span class="number">1</span>] + refer_point_1)</span><br><span class="line">        position_kanagawa_learned[<span class="number">1</span>].append(data[<span class="number">0</span>] + refer_point_0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.scatter(position_tokyo_leaning[<span class="number">0</span>], position_tokyo_leaning[<span class="number">1</span>], c=<span class="string">"red"</span>, label=<span class="string">"Tokyo_Learn"</span>, marker=<span class="string">"+"</span>)</span><br><span class="line">plt.scatter(position_kanagawa_leaning[<span class="number">0</span>], position_kanagawa_leaning[<span class="number">1</span>], c=<span class="string">"blue"</span>, label=<span class="string">"Kanagawa_Learn"</span>, marker=<span class="string">"+"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分類データ</span></span><br><span class="line">plt.scatter(position_tokyo_learned[<span class="number">0</span>], position_tokyo_learned[<span class="number">1</span>], c=<span class="string">"red"</span>, label=<span class="string">"Tokyo_Learn"</span>, marker=<span class="string">"*"</span>)</span><br><span class="line">plt.scatter(position_kanagawa_learned[<span class="number">0</span>], position_kanagawa_learned[<span class="number">1</span>], c=<span class="string">"blue"</span>, label=<span class="string">"Kanagawa_Learn"</span>, marker=<span class="string">"*"</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/7f15db97-87d6-1ad0-2c03-6763581642f5.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Udemy-ゼロからPythonで学ぶ人工知能と機械学習-ニューラルネットワークまとめ&quot;&gt;&lt;a href=&quot;#Udemy-ゼロからPythonで学ぶ人工知能と機械学習-ニューラルネットワークまとめ&quot; class=&quot;headerlink&quot; title=&quot;Udemy 
      
    
    </summary>
    
    
      <category term="Python" scheme="https://we-yu.github.io/tags/Python/"/>
    
      <category term="Udemy" scheme="https://we-yu.github.io/tags/Udemy/"/>
    
      <category term="MachineLearning" scheme="https://we-yu.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Udemy - ゼロからPythonで学ぶ人工知能と機械学習 : 数学系処理／ニューロン編</title>
    <link href="https://we-yu.github.io/2019/03/23/Udemy-%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89Python%E3%81%A7%E5%AD%A6%E3%81%B6%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E3%81%A8%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92-%E6%95%B0%E5%AD%A6%E7%B3%BB%E5%87%A6%E7%90%86%EF%BC%8F%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%AD%E3%83%B3%E7%B7%A8/"/>
    <id>https://we-yu.github.io/2019/03/23/Udemy-ゼロからPythonで学ぶ人工知能と機械学習-数学系処理／ニューロン編/</id>
    <published>2019-03-22T19:21:12.000Z</published>
    <updated>2019-03-27T17:57:45.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Udemy-ゼロからPythonで学ぶ人工知能と機械学習-数学系処理／ニューロン編"><a href="#Udemy-ゼロからPythonで学ぶ人工知能と機械学習-数学系処理／ニューロン編" class="headerlink" title="Udemy - ゼロからPythonで学ぶ人工知能と機械学習 : 数学系処理／ニューロン編"></a>Udemy - ゼロからPythonで学ぶ人工知能と機械学習 : 数学系処理／ニューロン編</h2><h3 id="みんなのAI講座-ゼロからPythonで学ぶ人工知能と機械学習"><a href="#みんなのAI講座-ゼロからPythonで学ぶ人工知能と機械学習" class="headerlink" title="みんなのAI講座 ゼロからPythonで学ぶ人工知能と機械学習"></a><a href="https://www.udemy.com/learning-ai/learn/v4/overview" target="_blank" rel="noopener">みんなのAI講座 ゼロからPythonで学ぶ人工知能と機械学習</a></h3><p><small>AI Class : Learn AI and MachineLearning by Python from scratch</small></p><h4 id="Package-import"><a href="#Package-import" class="headerlink" title="Package import"></a>Package import</h4><blockquote><p>Preferences or Setting -&gt; [Project Name] -&gt; Project Interpreter</p></blockquote><ul><li>If there’s warnings about packaging tool, install that at the time of package unable to import.</li><li>I got error to import <code>matplotlib</code>. Searched by error-message, Finally I got it by this solution.<ul><li><a href="http://zashikiro.hateblo.jp/entry/2012/10/02/130031" target="_blank" rel="noopener">http://zashikiro.hateblo.jp/entry/2012/10/02/130031</a></li><li><a href="https://stackoverflow.com/questions/44318333/unable-to-import-matplotlib-pyplot" target="_blank" rel="noopener">https://stackoverflow.com/questions/44318333/unable-to-import-matplotlib-pyplot</a></li></ul></li></ul><h4 id="Plot-Linear-function"><a href="#Plot-Linear-function" class="headerlink" title="Plot Linear function"></a>Plot Linear function</h4><ul><li>Use <code>matplotlib</code>, <code>numpy</code> packages.</li><li>On Python, Able to package define as alias.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.1</span>)   <span class="comment"># 0〜9.9を0.1刻みで作ったものをリスト形式で格納</span></span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line"></span><br><span class="line">y = <span class="number">2</span> * x + <span class="number">1</span> <span class="comment"># xリストの各要素を二倍し、+1する</span></span><br><span class="line"><span class="keyword">print</span> y</span><br><span class="line"></span><br><span class="line">plt.plot(x, y) <span class="comment"># 作成したx,yで二次元グラフ描画</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/94458787-abf5-daed-565b-77ba3379d609.png" alt="image"></p><ul><li>By <code>plt.show()</code>, Able to draw as this graph.</li><li>On this Window, Able to Move, Zoom-in/out, Change range.</li></ul><h4 id="Plot-Quadratic-Cubic-functions"><a href="#Plot-Quadratic-Cubic-functions" class="headerlink" title="Plot Quadratic, Cubic functions"></a>Plot Quadratic, Cubic functions</h4><ul><li>If you make function, Able to draw over Quadratic functions.</li><li>Stack function into same alias, Draw graph in same Window.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-5</span>, <span class="number">15</span>, <span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二次関数生成</span></span><br><span class="line"><span class="comment"># y = x^2 - 10x + 10</span></span><br><span class="line">y_2 = x**<span class="number">2</span> - <span class="number">10</span>*x + <span class="number">10</span></span><br><span class="line">plt.plot(x, y_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三次関数生成</span></span><br><span class="line"><span class="comment"># y = x^3 - 10x^2 - 10x + 10</span></span><br><span class="line">y_3 = x**<span class="number">3</span> - <span class="number">10</span>*x**<span class="number">2</span> - <span class="number">10</span>*x + <span class="number">10</span></span><br><span class="line">plt.plot(x, y_3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pltに放り込まれた関数を描画</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/cd2ba143-9008-1c01-89dc-fcf4ccb61ced.png" alt="image"></p><h4 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h4><ul><li>Non-local value and Non-argument value (Napier) in user defined function. This is defined outer of function. Is it nothing any issues?<ul><li>(Defined in main func, Used in sigmoid func)</li><li>On this time value equals defined on just before call function?</li></ul></li><li><code>e</code> is constant value… Can I use <code>math.e</code> in local func?</li><li>By Python manner, Is it nothing issues “Unidentified” values in function?</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="comment"># y = 1 / (1 + e^(-1))</span></span><br><span class="line">    s = <span class="number">1</span> / (<span class="number">1</span> + e**-a)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">e = math.e</span><br><span class="line"></span><br><span class="line">dx = <span class="number">0.1</span></span><br><span class="line">x = np.arange(<span class="number">-8</span>, <span class="number">8</span>, dx)</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line"></span><br><span class="line">y_sig = sigmoid(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y_sig)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h4><ul><li>At <code>.plot</code>, set <code>label = &quot;string&quot;</code> then use <code>.legend</code>. It able to add <strong>Name</strong> in graph.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(a)</span>:</span></span><br><span class="line">    s = <span class="number">1</span> / (<span class="number">1</span> + math.e**-a)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">dx = <span class="number">0.1</span></span><br><span class="line">x = np.arange(<span class="number">-8</span>, <span class="number">8</span>, dx)</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># シグモイド関数</span></span><br><span class="line">y_sig = sigmoid(x)</span><br><span class="line"><span class="comment"># シグモイド関数の傾き算出</span></span><br><span class="line">y_dsig = (sigmoid(x+dx) - sigmoid(x)) / dx</span><br><span class="line"><span class="comment"># シグモイド関数の微分</span></span><br><span class="line">dy_sig = sigmoid(x) * (<span class="number">1</span> - sigmoid(x))</span><br><span class="line"></span><br><span class="line">plt.plot(x, y_sig, label = <span class="string">"sigmoid"</span>)</span><br><span class="line">plt.plot(x, y_dsig, label = <span class="string">"d_sigmoid"</span>)</span><br><span class="line">plt.plot(x, dy_sig, label = <span class="string">"dy_sigmoid"</span>)</span><br><span class="line">plt.legend()    <span class="comment"># plot時にラベルを付与し、legendを呼び出すことで描画グラフに名称が付く</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/87e01723-908b-03c5-e120-0dad3e4de246.png" alt="image"></p><h4 id="Sample-of-Neural-Network-input-output"><a href="#Sample-of-Neural-Network-input-output" class="headerlink" title="Sample of Neural Network input/output"></a>Sample of Neural Network input/output</h4><ul><li>Neural Network sample script.</li><li>Stack values in list. Finally shows sum.<ul><li>Finally, Get 1 output from several input.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Neuron class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Neuron</span> :</span></span><br><span class="line">    input_sum = <span class="number">0.0</span> <span class="comment"># 最終的にこの値が少しずつ増える</span></span><br><span class="line">    output = <span class="number">0.0</span>    <span class="comment"># output用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setInput</span><span class="params">(self, inp)</span>:</span></span><br><span class="line">        self.input_sum += inp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOutput</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.output = self.input_sum</span><br><span class="line">        <span class="keyword">return</span> self.output</span><br><span class="line"></span><br><span class="line"><span class="comment"># Neural Newrok class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="comment"># Create Neuron instance</span></span><br><span class="line">    neuron = Neuron()</span><br><span class="line">    <span class="comment"># Receive inputs,</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commit</span><span class="params">(self, input_data)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> input_data:</span><br><span class="line">            <span class="comment"># setInputメソッドに各入力を与えていく</span></span><br><span class="line">            self.neuron.setInput(data)</span><br><span class="line">        <span class="keyword">return</span> self.neuron.getOutput()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create NeuralNework instance</span></span><br><span class="line">neural_network = NeuralNetwork()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Execute</span></span><br><span class="line">trial_data = [<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Output ="</span>, neural_network.commit(trial_data)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Output = 6.0</span><br></pre></td></tr></table></figure><h4 id="Neural-Network-Single-Neuron-sample"><a href="#Neural-Network-Single-Neuron-sample" class="headerlink" title="Neural Network, Single Neuron sample"></a>Neural Network, Single Neuron sample</h4><ul><li>It is getting harder…</li><li>Get output from Sigmoid func as <code>1 / (1 + e^-x)</code></li><li>A point “Input” is latitude(λ), longitude(θ), bias(b). Finally get “Output”.<ul><li>On this time, Calculate output by <code>sigmoid(λ * w0 + θ * w1 + b * w2 )</code>. Set threshold as 0.5f. Judge Tokyo/Kanagawa.</li></ul></li><li>If input value to sigmoid func is loo much bigger or lower, Learning won’t be work. Make input between 0.0f-1.0f, Use offset value <code>refer_point_0/1</code>, Adjust input value to neuron. (Reverse value at the time of graph drawing)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># シグモイド関数定義</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="comment"># math.exp(-a) = e^-1</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1.0</span> / (<span class="number">1.0</span> + math.exp(-a)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Neuron class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Neuron</span> :</span></span><br><span class="line">    input_sum = <span class="number">0.0</span> <span class="comment"># 最終的にこの値が少しずつ増える</span></span><br><span class="line">    output = <span class="number">0.0</span>    <span class="comment"># output用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setInput</span><span class="params">(self, inp)</span>:</span></span><br><span class="line">        self.input_sum += inp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOutput</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.output = sigmoid(self.input_sum)</span><br><span class="line">        <span class="keyword">return</span> self.output</span><br><span class="line"></span><br><span class="line">    <span class="comment"># input/output values intialize</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.input_sum = <span class="number">0</span></span><br><span class="line">        self.output = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Neural Newrok class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="comment"># 入力値の重みづけ</span></span><br><span class="line">    w = [<span class="number">-0.5</span>, <span class="number">0.5</span>, <span class="number">-0.2</span>] <span class="comment"># [2]はバイアス重み</span></span><br><span class="line">    <span class="comment"># Create Neuron instance</span></span><br><span class="line">    neuron = Neuron()</span><br><span class="line">    <span class="comment"># Receive inputs,</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commit</span><span class="params">(self, input_data)</span>:</span></span><br><span class="line">        self.neuron.reset()</span><br><span class="line"></span><br><span class="line">        bias = <span class="number">1.0</span></span><br><span class="line">        self.neuron.setInput(input_data[<span class="number">0</span>] * self.w[<span class="number">0</span>])</span><br><span class="line">        self.neuron.setInput(input_data[<span class="number">1</span>] * self.w[<span class="number">1</span>])</span><br><span class="line">        self.neuron.setInput(bias * self.w[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> self.neuron.getOutput()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基準点(データの範囲を0.0〜1.0内に収める為)</span></span><br><span class="line">refer_point_0 = <span class="number">34.5</span></span><br><span class="line">refer_point_1 = <span class="number">137.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read data</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">trial_data = []</span><br><span class="line">trial_data_file = open(<span class="string">"trial_data.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> trial_data_file:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    line = line.rstrip().split(<span class="string">","</span>) <span class="comment"># 改行を取り除き,で分ける</span></span><br><span class="line">    <span class="comment"># print (float(line[0]) - refer_point_0), (float(line[1]) - refer_point_1)</span></span><br><span class="line">    trial_data.append([float(line[<span class="number">0</span>]) - refer_point_0, float(line[<span class="number">1</span>]) - refer_point_1])</span><br><span class="line">trial_data_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create NeuralNework instance</span></span><br><span class="line">neural_network = NeuralNetwork()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Execute</span></span><br><span class="line">position_tokyo = [[], []] <span class="comment"># [経度, 緯度]</span></span><br><span class="line">position_kanagawa = [[], []] <span class="comment"># [経度, 緯度]</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> trial_data:</span><br><span class="line">    <span class="comment"># cmt = sigmoid(data[0] + data[1])</span></span><br><span class="line">    cmt = neural_network.commit(data)</span><br><span class="line">    <span class="keyword">print</span> data[<span class="number">0</span>], data[<span class="number">1</span>],</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;:.2f&#125;'</span>.format(cmt),</span><br><span class="line">    <span class="keyword">if</span> cmt &lt; <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"TKO"</span></span><br><span class="line">        position_tokyo[<span class="number">0</span>].append(data[<span class="number">1</span>] + refer_point_1)  <span class="comment"># add 経度</span></span><br><span class="line">        position_tokyo[<span class="number">1</span>].append(data[<span class="number">0</span>] + refer_point_0)  <span class="comment"># add 緯度</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"KNGW"</span></span><br><span class="line">        position_kanagawa[<span class="number">0</span>].append(data[<span class="number">1</span>] + refer_point_1)  <span class="comment"># add 経度</span></span><br><span class="line">        position_kanagawa[<span class="number">1</span>].append(data[<span class="number">0</span>] + refer_point_0)  <span class="comment"># add 緯度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trial_data = [1.0, 2.0, 3.0]</span></span><br><span class="line"><span class="comment"># print "Output =", neural_network.commit(trial_data)</span></span><br><span class="line"><span class="comment"># 合計値が0の時は0.5、正方向に増えると１に漸近、小さくなると０に漸近</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 散布図描画</span></span><br><span class="line">plt.scatter(position_tokyo[<span class="number">0</span>], position_tokyo[<span class="number">1</span>], c = <span class="string">"red"</span>, label = <span class="string">"Tokyo"</span>, marker = <span class="string">"+"</span>)</span><br><span class="line">plt.scatter(position_kanagawa[<span class="number">0</span>], position_kanagawa[<span class="number">1</span>], c = <span class="string">"blue"</span>, label = <span class="string">"Kanagawa"</span>, marker = <span class="string">"+"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/3126a21a-5a83-cb67-a59f-66cfaf1b411d.png" alt="image"></p><h4 id="Neural-Network-3-Layers-Network-sample-Unsupervised"><a href="#Neural-Network-3-Layers-Network-sample-Unsupervised" class="headerlink" title="Neural Network, 3 Layers Network sample (Unsupervised)"></a>Neural Network, 3 Layers Network sample (Unsupervised)</h4><ul><li>Construct as 3 layers (Input-layer, Middle-layer, Output-layer)</li></ul><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/dcf735af-b652-5abc-1dbb-c8eeffa5c751.png" alt="image"></p><ul><li>Each outputs from Input neurons&amp;bias, Use as inputs for Middle neurons.<ul><li>Same as this way from Middle to Output.</li></ul></li><li>Add “Weight” each values between Neurons.</li><li>Output from Final Neuron, That is finally output of this network.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># シグモイド関数定義</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="comment"># math.exp(-a) = e^-1</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1.0</span> / (<span class="number">1.0</span> + math.exp(-a)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Neuron class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Neuron</span> :</span></span><br><span class="line">    input_sum = <span class="number">0.0</span> <span class="comment"># 最終的にこの値が少しずつ増える</span></span><br><span class="line">    output = <span class="number">0.0</span>    <span class="comment"># output用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setInput</span><span class="params">(self, inp)</span>:</span></span><br><span class="line">        self.input_sum += inp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOutput</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.output = sigmoid(self.input_sum)</span><br><span class="line">        <span class="keyword">return</span> self.output</span><br><span class="line"></span><br><span class="line">    <span class="comment"># input/output values intialize</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.input_sum = <span class="number">0</span></span><br><span class="line">        self.output = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Neural Newrok class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NeuralNetwork</span>:</span></span><br><span class="line">    <span class="comment"># 入力値の重みづけ</span></span><br><span class="line">    <span class="comment"># 入力層・中間層間の重み</span></span><br><span class="line">    w_im = [[<span class="number">0.496</span>, <span class="number">0.512</span>], [<span class="number">-0.501</span>, <span class="number">0.998</span>], [<span class="number">0.498</span>, <span class="number">-0.502</span>]] <span class="comment"># 第一入力NEU→各中間NEUの重み, 第二入力NEU→各中間NEUの重み, 入力バイアス→各中間NEUの重み</span></span><br><span class="line">    <span class="comment"># 中間層・出力層間の重み</span></span><br><span class="line">    w_mo = [<span class="number">0.121</span>, <span class="number">-0.4996</span>, <span class="number">0.200</span>] <span class="comment"># 第一中間NEU→出力NEUの重み, 第二中間NEU→出力NEUの重み, 中間バイアス→出力NEUの重み</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 入力層：N（ニューロン）、N、バイアス　入力層は数値がそのまま入る</span></span><br><span class="line">    input_layer = [<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>]</span><br><span class="line">    <span class="comment"># 中間層：Nインスタンス、Nインスタンス、バイアス</span></span><br><span class="line">    middle_layer = [Neuron(), Neuron(), <span class="number">1.0</span>]</span><br><span class="line">    <span class="comment"># Nはひとつだけ</span></span><br><span class="line">    output_layer = Neuron()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Receive inputs,</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commit</span><span class="params">(self, input_data)</span>:</span></span><br><span class="line">        <span class="comment"># 各層ニューロン初期化</span></span><br><span class="line">        self.input_layer[<span class="number">0</span>] = input_data[<span class="number">0</span>]</span><br><span class="line">        self.input_layer[<span class="number">1</span>] = input_data[<span class="number">1</span>]</span><br><span class="line">        self.middle_layer[<span class="number">0</span>].reset()</span><br><span class="line">        self.middle_layer[<span class="number">1</span>].reset()</span><br><span class="line">        self.output_layer.reset()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 入力層→中間層</span></span><br><span class="line">        <span class="comment"># 第一中間ニューロンに入力３つ</span></span><br><span class="line">        nr_idx = <span class="number">0</span></span><br><span class="line">        self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">0</span>] * self.w_im[<span class="number">0</span>][nr_idx]) <span class="comment"># 第一入力N出力値×対応重み</span></span><br><span class="line">        self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">1</span>] * self.w_im[<span class="number">1</span>][nr_idx])</span><br><span class="line">        self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">2</span>] * self.w_im[<span class="number">2</span>][nr_idx]) <span class="comment"># バイアス</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 第二中間ニューロンに入力３つ</span></span><br><span class="line">        nr_idx = <span class="number">1</span></span><br><span class="line">        self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">0</span>] * self.w_im[<span class="number">0</span>][nr_idx])</span><br><span class="line">        self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">1</span>] * self.w_im[<span class="number">1</span>][nr_idx])</span><br><span class="line">        self.middle_layer[nr_idx].setInput(self.input_layer[<span class="number">2</span>] * self.w_im[<span class="number">2</span>][nr_idx]) <span class="comment"># バイアス</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 中間層→出力層</span></span><br><span class="line">        self.output_layer.setInput(self.middle_layer[<span class="number">0</span>].getOutput() * self.w_mo[<span class="number">0</span>])</span><br><span class="line">        self.output_layer.setInput(self.middle_layer[<span class="number">1</span>].getOutput() * self.w_mo[<span class="number">1</span>])</span><br><span class="line">        self.output_layer.setInput(self.middle_layer[<span class="number">2</span>] * self.w_mo[<span class="number">2</span>]) <span class="comment"># バイアス</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.output_layer.getOutput() <span class="comment"># ニューラルネットワーク全体の出力値が帰る</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基準点(データの範囲を0.0〜1.0内に収める為)</span></span><br><span class="line">refer_point_0 = <span class="number">34.5</span></span><br><span class="line">refer_point_1 = <span class="number">137.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read data</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">trial_data = []</span><br><span class="line">trial_data_file = open(<span class="string">"trial_data.txt"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> trial_data_file:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    line = line.rstrip().split(<span class="string">","</span>) <span class="comment"># 改行を取り除き,で分ける</span></span><br><span class="line">    <span class="comment"># print (float(line[0]) - refer_point_0), (float(line[1]) - refer_point_1)</span></span><br><span class="line">    trial_data.append([float(line[<span class="number">0</span>]) - refer_point_0, float(line[<span class="number">1</span>]) - refer_point_1])</span><br><span class="line">trial_data_file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create NeuralNework instance</span></span><br><span class="line">neural_network = NeuralNetwork()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Execute</span></span><br><span class="line">position_tokyo = [[], []] <span class="comment"># [経度, 緯度]</span></span><br><span class="line">position_kanagawa = [[], []] <span class="comment"># [経度, 緯度]</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> trial_data:</span><br><span class="line">    <span class="comment"># cmt = sigmoid(data[0] + data[1])</span></span><br><span class="line">    cmt = neural_network.commit(data)</span><br><span class="line">    <span class="keyword">print</span> data[<span class="number">0</span>], data[<span class="number">1</span>],</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'&#123;:.2f&#125;'</span>.format(cmt),</span><br><span class="line">    <span class="keyword">if</span> cmt &lt; <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"TKO"</span></span><br><span class="line">        position_tokyo[<span class="number">0</span>].append(data[<span class="number">1</span>] + refer_point_1)  <span class="comment"># add 経度</span></span><br><span class="line">        position_tokyo[<span class="number">1</span>].append(data[<span class="number">0</span>] + refer_point_0)  <span class="comment"># add 緯度</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"KNGW"</span></span><br><span class="line">        position_kanagawa[<span class="number">0</span>].append(data[<span class="number">1</span>] + refer_point_1)  <span class="comment"># add 経度</span></span><br><span class="line">        position_kanagawa[<span class="number">1</span>].append(data[<span class="number">0</span>] + refer_point_0)  <span class="comment"># add 緯度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 散布図描画</span></span><br><span class="line">plt.scatter(position_tokyo[<span class="number">0</span>], position_tokyo[<span class="number">1</span>], c = <span class="string">"red"</span>, label = <span class="string">"Tokyo"</span>, marker = <span class="string">"+"</span>)</span><br><span class="line">plt.scatter(position_kanagawa[<span class="number">0</span>], position_kanagawa[<span class="number">1</span>], c = <span class="string">"blue"</span>, label = <span class="string">"Kanagawa"</span>, marker = <span class="string">"+"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://qiita-image-store.s3.amazonaws.com/0/135051/e1a92c93-eaa6-4cc8-4d4a-54d7e8d0dda0.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Udemy-ゼロからPythonで学ぶ人工知能と機械学習-数学系処理／ニューロン編&quot;&gt;&lt;a href=&quot;#Udemy-ゼロからPythonで学ぶ人工知能と機械学習-数学系処理／ニューロン編&quot; class=&quot;headerlink&quot; title=&quot;Udemy - ゼロ
      
    
    </summary>
    
    
      <category term="Python" scheme="https://we-yu.github.io/tags/Python/"/>
    
      <category term="Udemy" scheme="https://we-yu.github.io/tags/Udemy/"/>
    
      <category term="MachineLearning" scheme="https://we-yu.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>FGO - For FGO(Apple), Purchasing quartz from outside of Japan.</title>
    <link href="https://we-yu.github.io/2019/03/21/FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan/"/>
    <id>https://we-yu.github.io/2019/03/21/FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan/</id>
    <published>2019-03-21T16:01:28.000Z</published>
    <updated>2019-03-27T17:58:41.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan"><a href="#FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan" class="headerlink" title="FGO - For FGO(Apple), Purchasing quartz from outside of Japan."></a>FGO - For FGO(Apple), Purchasing quartz from outside of Japan.</h2><h3 id="Disclaimer"><a href="#Disclaimer" class="headerlink" title="Disclaimer"></a><font color="Red">Disclaimer</font></h3><ul><li><font color="Red">Sign up, Credit card registration, purchasing, please do it by your own responsibility.</font></li></ul><h4 id="Precondition"><a href="#Precondition" class="headerlink" title="Precondition"></a>Precondition</h4><ul><li>Long stay in outside of Japan.</li><li>Already registered Local credit card. (Non-JP Card)</li><li>Japanese Credit card No have or Expired.</li><li>Target game is Japanese FGO (FGOjp)</li></ul><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><ul><li><strong>Purchase by Android, Play on iPhone</strong></li></ul><h4 id="To-get-FGOjp"><a href="#To-get-FGOjp" class="headerlink" title="To get FGOjp"></a>To get FGOjp</h4><ul><li>FGOjp download available only in Japanese store. For both of Android and Apple versions.</li><li><strong>To get FGOjp</strong>, That is not difficult if you were living in outside of Japan.<ul><li>Change your current location by VPN, Or register AppleStore account make as Japanese local. (2018/Aug, No need register Credit to make account)</li></ul></li><li>After complete installation, As long as connect with internet, You can play FGOjp anywhere.</li><li>This is not main topic… But if you want to play in comfortable speed, I’d strongly recommend play in Apple version.</li></ul><h3 id="To-purchase"><a href="#To-purchase" class="headerlink" title="To purchase"></a>To purchase</h3><ul><li>This is free-to-play game. It is easy way to get, install, and play.<br>However, If you try to purchase, You may get this message and fail to pay.</li></ul><!-- ![alt](FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan/productError.png "title") --><p><img src="https://raw.githubusercontent.com/we-yu/we-yu.github.io/master/2019/03/21/FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan/productError.png"></p><blockquote><p>購入できません　指定されたプロダクトデータが取得できませんでした</p></blockquote><p><em><small>Unpurchasable. Failed to get target product data</small></em></p><h3 id="Hypothesis"><a href="#Hypothesis" class="headerlink" title="Hypothesis"></a>Hypothesis</h3><ul><li>To purchase Japanese game, Might be ApplreStore requires <strong>Credit Cared registered or Balance remained in Japanese account</strong>.</li><li>And <strong>Japanese Account only accepts Japanese Credit card</strong>.<ul><li>By this 2 case, Residents outside of Japan, They have been checkmate.</li></ul></li><li>At purchasing time, If switch to “Credit Card registered account”(<em>Your main account</em>), It also failed. Might be cancelled to purchase for “Application that isn’t exist in Account’s region”<ul><li>For example. If you have “USA AppleStore Account” and that is already registered your Credit. But AppleStore:USA <strong>Doesn’t have FGOjp</strong>, That purchasing will be cancel.</li></ul></li></ul><h3 id="To-solve"><a href="#To-solve" class="headerlink" title="To solve"></a>To solve</h3><ul><li>By that results. Realistic solving way to purchase. That is …<ol><li>Before purchasing, Migrate your account to Android FGOjp.</li><li>Move to <code>Da Vinci workshop</code> in game.</li><li>Purchase quartz as much you want.</li><li>Migrate account again, Back to Apple version.</li><li><strong>Roll your Gacha! Roll! Roll!! Roll!!!</strong></li><li>You got it!</li></ol></li></ul><!-- ![alt](FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan/mabo.jpg "title") --><!-- <img src="FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan/mabo.jpg" /> --><p><img src="https://raw.githubusercontent.com/we-yu/we-yu.github.io/master/2019/03/21/FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan/mabo.jpg"></p><h3 id="Loose-ends"><a href="#Loose-ends" class="headerlink" title="Loose ends"></a>Loose ends</h3><font color="Red">All of this section is expected from above results. Nothing any warranty exists.</font><ul><li>May succeed your purchasing if exist remaining balance in Japanese AppleStore account.</li><li>This article has precondition of <em>Nothing any Japanese Credit card</em><br>However, If you get <strong>JPY(￥) iTunes card</strong>, No need JP-Credit anymore.<ul><li>There is store that sells JP-iTunes card at near of you.</li><li>Your friend who going to Japan temporarily, or Come from Japan. Ask him to buy JP-iTunes card.</li><li>Use online shop to buy JP-iTunes card.</li></ul></li><li>As this way, If you get JPY iTunes card and succeed to top-up your Japanese AppleStore account. It <strong>might be</strong> don’t have to do annoying ping-pong account migration.</li></ul><h3 id="For-other-games"><a href="#For-other-games" class="headerlink" title="For other games"></a>For other games</h3><ul><li>Currently I play only FGO. I focused FGO on this article.</li><li>But maybe you can purchase for other similar (Only for Japan, Free-to-play) games.<ul><li>If you want to try, <font color="Red">Please do it by your own responsibility.</font></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan&quot;&gt;&lt;a href=&quot;#FGO-For-FGO-Apple-Purchasing-quartz-from-outside-of-Japan&quot; clas
      
    
    </summary>
    
    
      <category term="Apple" scheme="https://we-yu.github.io/tags/Apple/"/>
    
      <category term="FGO" scheme="https://we-yu.github.io/tags/FGO/"/>
    
      <category term="課金" scheme="https://we-yu.github.io/tags/%E8%AA%B2%E9%87%91/"/>
    
      <category term="ソシャゲ" scheme="https://we-yu.github.io/tags/%E3%82%BD%E3%82%B7%E3%83%A3%E3%82%B2/"/>
    
      <category term="purchase" scheme="https://we-yu.github.io/tags/purchase/"/>
    
      <category term="Game" scheme="https://we-yu.github.io/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Udemy Learning : Unity 3D迷路ゲーム開発入門</title>
    <link href="https://we-yu.github.io/2019/03/21/Udemy-Learning-Unity-3D%E8%BF%B7%E8%B7%AF%E3%82%B2%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80/"/>
    <id>https://we-yu.github.io/2019/03/21/Udemy-Learning-Unity-3D迷路ゲーム開発入門/</id>
    <published>2019-03-21T15:22:29.000Z</published>
    <updated>2019-03-27T17:58:09.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Udemy-Learning-Unity-3D迷路ゲーム開発入門"><a href="#Udemy-Learning-Unity-3D迷路ゲーム開発入門" class="headerlink" title="Udemy Learning : Unity 3D迷路ゲーム開発入門"></a>Udemy Learning : Unity 3D迷路ゲーム開発入門</h2><h3 id="Udemy-Learning-Unity-3D迷路ゲーム開発入門-1"><a href="#Udemy-Learning-Unity-3D迷路ゲーム開発入門-1" class="headerlink" title="Udemy Learning : Unity 3D迷路ゲーム開発入門"></a><a href="https://www.udemy.com/unity3d-maze/" target="_blank" rel="noopener">Udemy Learning : Unity 3D迷路ゲーム開発入門</a></h3><h4 id="Interest-points-Should-be-remember"><a href="#Interest-points-Should-be-remember" class="headerlink" title="Interest points (Should be remember)"></a>Interest points (Should be remember)</h4><ul><li><strong>10</strong>. whileによってプログラムを何度も実行しよう (How to control numbers of execution by using While)<ul><li>Attach to Unity, Insert Breakpoint.</li></ul></li></ul><ul><li><strong>18</strong>. 配列変数のすべての要素を対象としたLINQ処理を使おう (LINQ that is like SQL)<ul><li>How to use LINQ, Lambda.</li></ul></li></ul><ul><li><strong>21</strong>. .変数の値型と参照型を使い分けよう (Two types of variable: value and reference)<ul><li>What is type of value, type of reference.</li><li>What’s happen if change value inside function.</li></ul></li></ul><ul><li><strong>23</strong>. メソッドとの情報のやり取りについてまとめよう (interface between caller and callee of a method)<ul><li>Argument of <code>ref</code>, <code>out</code>.</li><li>Named Argument, Omittable Argument.</li></ul></li></ul><ul><li><strong>28</strong>. ロボットを配置しよう (Arrangement of robots)<ul><li>World space : Coordinates in 3D world.</li><li>Screen space : Grid of Camera-view. Origin(1, 1) is left-bottom of view. Maximum is Undefined. (Depend on screen resolution)</li><li>View-port space : Grid of Camera-view. Origin(1, 1) is right-top of view. Maximum is (1.0f, 1.0f).<ul><li><strong>This is relative value</strong>. For example, (0.5f, 0.5f) is always center point of view.</li></ul></li></ul></li></ul><ul><li><strong>30</strong>. RobotMotionクラスを作成しよう (RobotMotion class that is used for animation)<ul><li>Action Class</li><li>Nameless Function, Lambda</li></ul></li></ul><ul><li><strong>31</strong>. マウスクリックの動作を作成しよう (How to make an interface using mouse click)<ul><li>Copy value of reference.</li><li>Double constructor(Call Constructor from Constructor in same Class)</li></ul></li></ul><ul><li><strong>39</strong>. セルを作って迷路をつくろう（その2）(Maze creation based on lattice cells (2))<ul><li>Processing index for all values in array by LINQ（Use ForEach : Process for each values in array）</li></ul></li></ul><ul><li><strong>Total</strong><ul><li>Static Function = Callable function without Instantiate.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Udemy-Learning-Unity-3D迷路ゲーム開発入門&quot;&gt;&lt;a href=&quot;#Udemy-Learning-Unity-3D迷路ゲーム開発入門&quot; class=&quot;headerlink&quot; title=&quot;Udemy Learning : Unity 3D迷路ゲ
      
    
    </summary>
    
    
      <category term="Unity" scheme="https://we-yu.github.io/tags/Unity/"/>
    
      <category term="Udemy" scheme="https://we-yu.github.io/tags/Udemy/"/>
    
  </entry>
  
  <entry>
    <title>Udemy-ゼロからPythonで学ぶ人工知能と機械学習 : Python基礎編</title>
    <link href="https://we-yu.github.io/2019/03/20/Udemy-%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89Python%E3%81%A7%E5%AD%A6%E3%81%B6%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E3%81%A8%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92-Python%E5%9F%BA%E7%A4%8E%E7%B7%A8/"/>
    <id>https://we-yu.github.io/2019/03/20/Udemy-ゼロからPythonで学ぶ人工知能と機械学習-Python基礎編/</id>
    <published>2019-03-20T15:45:09.000Z</published>
    <updated>2019-03-27T17:58:02.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="みんなのAI講座-ゼロからPythonで学ぶ人工知能と機械学習"><a href="#みんなのAI講座-ゼロからPythonで学ぶ人工知能と機械学習" class="headerlink" title="みんなのAI講座 ゼロからPythonで学ぶ人工知能と機械学習"></a><a href="https://www.udemy.com/learning-ai/learn/v4/overview" target="_blank" rel="noopener">みんなのAI講座 ゼロからPythonで学ぶ人工知能と機械学習</a></h2><p><small>Learning AI and Machinelearning by Python from scratch.</small></p><h3 id="Background-of-myself"><a href="#Background-of-myself" class="headerlink" title="Background of myself"></a>Background of myself</h3><ul><li>Never used Python</li><li>Main skill is C</li><li>Use C# for Unity in private.</li><li>In work, Use PHP+HTML+CSS+JavaScript</li></ul><h3 id="Set-comment-in-multiple-lines"><a href="#Set-comment-in-multiple-lines" class="headerlink" title="Set comment in multiple lines"></a>Set comment in multiple lines</h3><blockquote><p>Ctrl + /<br><br>Command + /</p></blockquote><h3 id="Allow-Japanese-text"><a href="#Allow-Japanese-text" class="headerlink" title="Allow Japanese text"></a>Allow Japanese text</h3><p>At top of file</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#config: UTF-8</span></span><br></pre></td></tr></table></figure><h3 id="Text-Multiplication"><a href="#Text-Multiplication" class="headerlink" title="Text Multiplication"></a>Text Multiplication</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"Hello"</span></span><br><span class="line"></span><br><span class="line">d = a * <span class="number">5</span></span><br><span class="line"><span class="keyword">print</span> d</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HelloHelloHelloHelloHello</span><br></pre></td></tr></table></figure><h3 id="What-is-Tuple"><a href="#What-is-Tuple" class="headerlink" title="What is Tuple?"></a>What is Tuple?</h3><p>Unchangeable array. Can I use as <code>DEFINE</code> or <code>Const</code>?</p><h3 id="What-is-Dictionary"><a href="#What-is-Dictionary" class="headerlink" title="What is Dictionary?"></a>What is Dictionary?</h3><p>It’s possible to call values as Associative-array. (It can use text as index)</p><h3 id="Debugger"><a href="#Debugger" class="headerlink" title="Debugger"></a>Debugger</h3><ul><li>To insert break-point, Click line-number. Stop execution at that point.</li><li>To kick debug, Kick <code>Debug&quot;File name&quot;</code> command.</li><li>Execution will be stop at break-point. Kick <code>Step into(F7)</code> proceed step 1 by 1.</li><li>Time of <strong>Left side</strong> update, That is “Moved to next line”.</li></ul><h3 id="List-in-List"><a href="#List-in-List" class="headerlink" title="List in List"></a>List in List</h3><ul><li>It can generate Vector and Matrix.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [[<span class="number">2012</span>, <span class="number">2013</span>, <span class="number">2014</span>], [<span class="number">2015</span>, <span class="number">2016</span>, <span class="number">2017</span>]]</span><br><span class="line">b = a[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> b <span class="comment"># １番目リストの０番要素にアクセス</span></span><br><span class="line"></span><br><span class="line">a.append([<span class="number">2018</span>, <span class="number">2019</span>])</span><br><span class="line"><span class="keyword">print</span> a <span class="comment"># リストを追加</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">2</span>].append(<span class="number">2020</span>)</span><br><span class="line"><span class="keyword">print</span> a <span class="comment"># リスト内のリストに要素追加</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2015</span><br><span class="line">[[2012, 2013, 2014], [2015, 2016, 2017], [2018, 2019]]</span><br><span class="line">[[2012, 2013, 2014], [2015, 2016, 2017], [2018, 2019, 2020]]</span><br></pre></td></tr></table></figure><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><ul><li>Define Class, Define Value and Method, Instantiate.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define Class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span></span><br><span class="line">    <span class="comment"># property</span></span><br><span class="line">    name = <span class="string">""</span></span><br><span class="line">    <span class="comment"># Method</span></span><br><span class="line">    <span class="comment"># 必ず引数部にselfを書く</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># メソッド内でプロパティにアクセスする場合は "self." が必須</span></span><br><span class="line">        m = self.name + <span class="string">" : Bow-wow!"</span></span><br><span class="line">        <span class="keyword">print</span> m</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create instance</span></span><br><span class="line">pochi = Dog()</span><br><span class="line">pochi.name = <span class="string">"POCHI"</span></span><br><span class="line">pochi.bark()</span><br><span class="line"></span><br><span class="line">hachi = Dog()</span><br><span class="line">hachi.name = <span class="string">"HACHI"</span></span><br><span class="line">hachi.bark()</span><br></pre></td></tr></table></figure><h3 id="Class-List-and-For"><a href="#Class-List-and-For" class="headerlink" title="Class, List, and For"></a>Class, List, and For</h3><ul><li>Instantiated Instance can be Define or access as normal value, array.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Value値の自乗値をReturnする</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculation</span>:</span></span><br><span class="line">    value = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(self)</span>:</span></span><br><span class="line">        s = self.value * self.value</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">calcs = [Calculation(), Calculation(), Calculation()]</span><br><span class="line"></span><br><span class="line">calcs[<span class="number">0</span>].value = <span class="number">3</span></span><br><span class="line">calcs[<span class="number">1</span>].value = <span class="number">4</span></span><br><span class="line">calcs[<span class="number">2</span>].value = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> calcs:</span><br><span class="line">    <span class="keyword">print</span> c.square()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">16</span><br><span class="line">25</span><br></pre></td></tr></table></figure><h3 id="File-Open-Close-then-Cast-on-that-time"><a href="#File-Open-Close-then-Cast-on-that-time" class="headerlink" title="File : Open / Close, then Cast on that time"></a>File : Open / Close, then Cast on that time</h3><ul><li>It is same as C, Grab and Close a file. How every, It is able to cast (ex, integer) at the time of read.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">score_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read CSV file in same directory</span></span><br><span class="line">score_list_file = open(<span class="string">"score.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> score_list_file :</span><br><span class="line">    score = score.rstrip() <span class="comment"># Delete line break</span></span><br><span class="line">    score = score.split(<span class="string">","</span>) <span class="comment"># Sprit by ,</span></span><br><span class="line">    <span class="comment"># score_list.append(score)</span></span><br><span class="line">    <span class="comment"># [0] read as text, [1] cast for integer</span></span><br><span class="line">    score_list.append([score[<span class="number">0</span>], int(score[<span class="number">1</span>])])</span><br><span class="line"></span><br><span class="line">score_list_file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> score_list</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[&apos;Taro&apos;, 78], [&apos;HHanako&apos;, 89], [&apos;Ichiro&apos;, 68], [&apos;Keita&apos;, 54], [&apos;Yuko&apos;, 89], [&apos;Reiko&apos;, 78]]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;みんなのAI講座-ゼロからPythonで学ぶ人工知能と機械学習&quot;&gt;&lt;a href=&quot;#みんなのAI講座-ゼロからPythonで学ぶ人工知能と機械学習&quot; class=&quot;headerlink&quot; title=&quot;みんなのAI講座 ゼロからPythonで学ぶ人工知能と機械学
      
    
    </summary>
    
    
      <category term="Python" scheme="https://we-yu.github.io/tags/Python/"/>
    
      <category term="Udemy" scheme="https://we-yu.github.io/tags/Udemy/"/>
    
      <category term="Python2.7" scheme="https://we-yu.github.io/tags/Python2-7/"/>
    
  </entry>
  
  <entry>
    <title>Review4RecentlyUdemyClasses</title>
    <link href="https://we-yu.github.io/2019/03/20/Review4RecentlyUdemyClasses/"/>
    <id>https://we-yu.github.io/2019/03/20/Review4RecentlyUdemyClasses/</id>
    <published>2019-03-19T17:48:45.000Z</published>
    <updated>2019-03-27T17:58:15.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Review-for-recently-Udemy-classes"><a href="#Review-for-recently-Udemy-classes" class="headerlink" title="Review for recently Udemy classes"></a>Review for recently Udemy classes</h2><ol><li><p><a href="https://www.udemy.com/unity3d-maze/" target="_blank" rel="noopener">Unity 3D迷路ゲーム開発入門</a></p><ul><li>Create 3D-packman-like game.</li><li>Using object is primitive one, or combined that. Materials, Shaders, Uses only for change color.</li><li>Control enemy-unit moving by simple AI. Let them trace player-unit.</li><li>Edit many of src files. Implemented by C#, Use Lambda many times.<ul><li>Use a lot of src files, and their class and functions connected as complicated. It may hard for first time programmer.</li><li>You have to use Pass by Reference, Pass by value and Inheritance. You’d better understand this informations before start.</li></ul></li><li>There’s start &amp; goal in game, But no have “scene change”.</li><li>Use UI as Buttons. This is Unity basic functions.</li><li><strong>Some programming knowledge, thinking is required. But if you have that already, good course for study</strong>.</li></ul></li></ol><ol start="2"><li><p><a href="https://www.udemy.com/unity-3d-game-design/" target="_blank" rel="noopener">【初心者でも簡単】はじめてのUnity 3D ゲームデザイン</a></p><ul><li><strong>Require Macintosh for student. If you want to install application for publish and setting in Windows, You have to replace of information skill in your mind.</strong><ul><li>Might be point isn’t Mac, <strong>Important is Command line</strong>. Maybe you can do same way on Linux.</li><li>Maybe this is my fault, Use on Cygwin, That was failed.</li></ul></li><li>Main game is very simple. Attach some lights and downloaded materials for object. Then wondering in that world.<ul><li><strong>Never coding</strong>. Basically uses StandardAssets and downloaded materials. Just build only “Stage for roaming”.</li></ul></li><li>This class is for beginner. On this time, Beginner means <strong>Never coding before</strong>.</li></ul></li></ol><ol start="3"><li><p><a href="https://www.udemy.com/create-a-simple-3d-unity-game-in-2-hours-from-scratch/" target="_blank" rel="noopener">Create a simple 3D Unity Game from Scratch</a></p><ul><li><strong>English only</strong>. No subtitles. But follow their title and action, You may understand what you have to do roughly.</li><li>On 3D stage, Play with bounding ball and get scores.</li><li>Save last score and high-score.</li><li>Nothing game clear, But implement Page transition from start to goal and time of gameover.</li><li>If Compare #1, Code is very simple. But need to use physical simulation. (Rigidbody, AddForce)</li><li>Use text and button in Unity UI.</li><li>Do build, And create execution file.</li><li>Nothing special features. It make as title, “Create sipmle game from scratch”.<ul><li>If you try to do from simple game, I can recommend for you.</li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Review-for-recently-Udemy-classes&quot;&gt;&lt;a href=&quot;#Review-for-recently-Udemy-classes&quot; class=&quot;headerlink&quot; title=&quot;Review for recently Udemy 
      
    
    </summary>
    
    
      <category term="Unity" scheme="https://we-yu.github.io/tags/Unity/"/>
    
      <category term="Udemy" scheme="https://we-yu.github.io/tags/Udemy/"/>
    
  </entry>
  
  <entry>
    <title>Post</title>
    <link href="https://we-yu.github.io/2019/03/19/Post/"/>
    <id>https://we-yu.github.io/2019/03/19/Post/</id>
    <published>2019-03-19T16:27:35.000Z</published>
    <updated>2019-03-19T16:27:35.724Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://we-yu.github.io/2019/03/19/hello-world/"/>
    <id>https://we-yu.github.io/2019/03/19/hello-world/</id>
    <published>2019-03-19T16:17:26.845Z</published>
    <updated>2019-03-19T16:17:26.845Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
